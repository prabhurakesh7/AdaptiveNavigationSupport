android application architecture event based layered 
building sdk hosting app sdk integrated applications lot users started build layered architecture ui managers interacting models networking layer layers total ui updates callbacks hr side member teams builded android applications lot users layered architecture applications active users good feedbacks hr beta version working expected week ago team members change architecture event driven based static event handles sdk handle listeners dispatch triggered component bit risky hard handle large sdk lot dependencies services multithreaded environment addition building sdk isolate main classes form host application impossible strong questions strong ol li layered architecture good stick event based preferred li li suitable solution sdk efficient li li good solution multithreaded environment li ol feedback articles read href http fernandocejas architecting android clean rel nofollow architecting android clean href https blog inf ed ac uk sapm architectural patterns mobile application development rel nofollow architectural patterns mobile application development href https medium google developer experts event driven programming android part f5ea4a3c4eab rel nofollow event driven programming android 

android based event based model android application special thread named strong looper strong thread select events event queue time processes sequentially executing handlers additional regular threads communicate looper thread conventional synchronization operations main role looper thread continuously check strong event queue strong select process event time knowledge main motivation android event based model handle alot strong events strong touch screen click sensors network internal external events choice event based model make sense main concern concurrency multitasking strong event driven strong strong reactive strong models choice multi threading concurrency general layered structure bad fact end day depends nature job sdk proving similar androids job handling massive events event based model strong layered strong structure strong concurrency strong multi threading main issue exploit multi core architecture jobs cpu intensive architectures 