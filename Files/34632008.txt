key indicators stream run slower loop 
streams code lot readable fashioned loops cases based experience read stream loop involve performance hit occasionally improvement difficult predict large project doesnt feasible write benchmark test loop strong deciding replace loop stream key factors strong expected size collection expected percentage values removed filtering complexity iterative operations type reduction aggregation strong give indication performance change result strong em narrowing href http stackoverflow questions rules thumb streams noredirect comment57005274 earlier question closed broad aspects parallel streams pretty covered href http stackoverflow questions parallel stream question lets limit sequential streams em 

feasible write benchmark test loop counter productive application specific loop perform put micro benchmark actual application standard rule optimization applies em don em write readable em em performance problem profile em entire application em check loop stream bottleneck case switch idioms bottleneck makes difference cases won real performance issue stem type operation performing nested iteration time complexity problems dependent loop minor performance differences idioms don change code em scales em 