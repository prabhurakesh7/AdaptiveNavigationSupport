analysis space complexity correct 
problem cracking coding interview edition strong problem strong write method compute permutations string solution coded test works agreed author solution runs em em time complexity solve problem factorials word top possibilities letter didnt make mention space complexity interviewers love time space complexity solution space complexity solution initial guess recursive calls level add frasl reasoned recursive calls backtrack times level space complexity number recursive calls algorithm makes permutations top level recursive calls gr gr gr made analysis space complexity correct 

answer wrong reason number recursive calls doesnt make recursive call add amount space stack call exits stack space released suppose calls times invocations stack time space complexity constant reason algorithm space complexity string stack entries invocations stack entries space usage stack stack entries exist heap time lengths parameters em em add means space usage stack frames appears explanation basics stack frames helpful stack frame area memory part stack typically stack predefined area memory location size stack frames predefined program executed wont stack initial data lets things simple stack area memory assumes stack grows upward lower higher addresses machines stacks grow downward simplify ill assuming machine stack grows upward method function procedure subroutine called area stack allocated area hold methods local variables references parameters references data program back possibly information information highly dependent machine programming language compiler method stack pointer moved calls return local variables parameters preserved resume executing frame size allocated stack calls returns returns parameters local variables longer accessible entire frame thrown moving stack pointer back previous stack pointer things saved frame stack back means point machine portion stack starting stack pointer unused correct speak frame reused ceased exist frame longer exists conceptually big empty area stack calls method recursively frame created place stack pointer pointing frame smaller equal larger size frame part memory frame call doesnt matter called parameters matter program doesnt remember parameters time area memory starting stack pointer empty program idea frame recently lived frame follow computing space complexity amount space stack thing matters frames exist stack point time frames existed past longer relevant computation matter parameters methods called case planning point technically wrong detail gross oversimplification 