hazelcast etcd golang differences similarities 
building realtime analytics system highly distributed plan distributed locks counters ensure data consistency kind distributed map client connected server prior experience distributed systems options ol li hazelcast li li golang etcd li ol pros cons topic context 

hazelcast etcd systems reason href https en wikipedia org wiki cap theorem cap theorem cap theorem states distributed system consistency availability partition tolerance distributed systems fall closer ca cp hazelcast ap system etcd raft implementation cp choice consistency availability performance general hazelcast performant handle failures raft etcd cost potential data loss consistency issues hazelcast works partitions data stores pieces data nodes node cluster key foo stored nodes bar stored nodes control number nodes hazelcast replicates data hazelcast map configuration network failure risk youll data lose data hazelcast alternatively raft etcd single leader highly consistent system stores data nodes means ideal storing large amounts state network failure etcd guarantee data remain consistent words youll stale data cost cp systems require majority cluster alive operate consistency issue relevant basic key storage extremely relevant locks youre expecting locks consistent entire cluster meaning node hold lock network failure em em hazelcast hazelcast sacrifices consistency favor availability cap theorem network failure lead nodes lock free acquired alternatively raft guarantees network failure node remain leader etcd cluster decisions made node means etcd guarantee consistent view cluster state times ensure lock obtained single process database seek cases cp ap data stores vastly consistency storing small amounts state consistent locks leader elections coordination tools cp system zookeeper consul high availability performance potential cost consistency hazelcast cassandra riak source author href http github kuujo copycat raft implementation 