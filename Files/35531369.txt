faster 
writing code point flow program determined int variables negative integer overflow range evaluate alternatively expect piece code run millions times run wondering faster experiment comparing huge randomly generated array curious sparsity array fraction data affect results results show expect equal time faster href http stack imgur pohyd png rel nofollow img src http stack imgur pohyd png alt graphical graph results curious shed light compiler hardware level strong edit strong em curiosity em learned branch prediction wondering analog comparison show strong strong href http stack imgur gpjom png rel nofollow img src http stack imgur gpjom png alt graph effect branch prediction expected interestingly graph flipped axis h3 update h3 added analysis included curiosity learning branch prediction logically equivalent expressions em em return true meant compared processing efficiency added actual benchmark analysis iterating arbitrary int variable people suggesting include opposed prediction behave closely remove branch prediction effect didnt boolean variables thought binary operations integers context int overflow issue important consideration general contexts cpu intel core i7 3610qm 3ghz version br tm se runtime environment build b14 br hotspot tm bit server vm build b02 mixed mode 

ignoring issue benchmarking em em flawed taking result face blockquote compiler hardware level blockquote compile memory loads conditional branches compile memory loads multiply conditional branch multiply faster conditional branch hardware level branch prediction ineffective increase ratio branch prediction effective reason conditional branches slower instruction execution pipeline stall branch prediction avoiding stall predicting branch speculatively choosing instruction based prediction fails delay instruction direction loaded explanation oversimplified accurate explanation literature provided cpu manufacturer assembly language coders compiler writers wikipedia page href https en wikipedia org wiki branch predictor branch predictors good background hr thing careful optimization values give wrong answer cases computing product results integer overflow hr strong update strong graphs tend confirm ul li branch prediction effect conditional branch case graphs li li project curves axis meet meeting point roughly li ul hr strong update strong dont understand curves cases em em clever branch predictors logic kind thing specific chip model number version results benchmarks systems advantage working negative values 