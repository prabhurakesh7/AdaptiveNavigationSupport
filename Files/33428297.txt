code faster 
making simple homework develop software find nearest points finished curious time run lot points full vc optimizations enabled seconds curious time thing expected longer seconds milliseconds happen code beaten small margin wouldnt surprised times faster file format funny thing file points mentioned earlier benchmark times copy paste file random points thought generating random points code run numbers make difference assignments decided generate random points react ran time 50ms increase hand increase 500ms worth noting takes seconds running inside netbeans run mode debug compiling made difference settings language h1 edit h1 tests suggestions class struct reason pass reference repeat test main function tony catching bug wont post code minor simply implement version tests time tested points iterations taking long time test late results didnt change 5228ms average 4424ms 223ms wins times faster removing calls math pow simply changing changed results 220ms average 195ms average 195ms average checked commented thought decided test compilers ability inline functions optimize kind simple calls obtained strange results shouldve back nervous forgot honest surprised compiler completely optimize line code werent corner case checks internal calls find interesting compiler notice corner case checks code whatsoever 

explained href http en cppreference numeric math pow checked href http stackoverflow pure strong strong overload integer power means call processed similar check case negative base integer power handled special good idea add conditions slow mathematical code proper purposes result squaring slower href http dhruba performance pattern multiplication 20x faster math pow twelve times principle reasonable optimize make compiler recognize antipatterns generate special code happened compilers settings compiler inlining capabilities inlining make code faster conclusion id programmer good writing mathematical code write code 