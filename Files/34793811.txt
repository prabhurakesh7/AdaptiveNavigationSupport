populating zoo object animal objects enum 
school procedural programming learning insight hard bit em design em syntax spent hours scrapping idea idea populate zoo abstract abstract subclasses called object instance subclass instance reference unique instance belongs iterate animals zoo specific order walk footpath animals zoo dictionary precisely point parse text file animal names string lion unique instance mapping strings animals settled write manageable code enables easily add animals future approach class define reflects ordering animals elements correspond strings parse text file method creates animal object part constructor iterate insert elements called add animal ol li add subclass li li stick element li li add case statement method li ol sound sane approach taking time write question happy approach missing em design pattern em solution back fire point feeling undesirable separation ideal 

h1 requirements h1 reading question found requirements zoo ol li lookup animals species li li define order species li li easily add animals future li ol h2 lookup animals species h2 mentioned undesirable separation string class effective item stated strings blockquote strong strings poor substitutes types strong piece data program file network keyboard input string form natural tendency leave tendency justified data textual nature numeric translated numeric type answer question translated generally type primitive object reference isn write advice violated blockquote animals species em em lookup animals species em instance em h2 define order species h2 define ordering species collection predictable iteration order mentioned h2 easily add animals future h2 adding animals consists steps mentioned side effect usage enum person access source code capability add species enum extended species class relationship semantically relation class em instantiation em elegant solution species reduces number steps adding animal species free h2 analysis parts code h2 h3 zoo h3 proposal zoo responsibility create animals consequence zoo created em em defined animals enum em em ordering variation zoos decouple creation animals zoo order flexibility animals zoo h3 animal h3 flexibility interfaces preferred abstract classes explained effective item blockquote strong item prefer interfaces abstract classes strong programming language mechanisms defining type permits multiple implementations interfaces abstract classes difference mechanisms abstract classes permitted implementations methods interfaces important difference implement type defined abstract class class subclass abstract class class defines required methods obeys general contract permitted implement interface class resides class hierarchy permits single inheritance restriction abstract classes severely constrains type definitions blockquote h3 circular references h3 question mention animal reference zoo resides introduces circular reference avoided href http programmers stackexchange disadvantages circular references blockquote circular class references create high coupling classes recompiled time changed blockquote h1 implementation h1 h1 usage h1 h1 discussion h1 implementation support multiple animal instances species make sense zoo animal needed href https github google guava wiki newcollectiontypesexplained classtoinstancemap guavas classtoinstancemap setmultimap creation animals considered part design problem complex animals constructed href https en wikipedia org wiki builder pattern builder pattern adding animal simple creating class implements interface adding zoo 