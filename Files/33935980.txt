practice clearing linked list 
coding data structure linked list learning sake standard libraries clear data structure null references suggest approach null start reference list suffice nulling start de reference pointers internal nodes null garbage collector confusion approach jdk linkedlist implementation dont treemap jdk 

interesting question answer long history subtle tradeoffs short answer clearing references correct operation data structure youre learning data structures id suggest worry issue implementation hunch havent benchmarked benefit accrue clearing link nodes rarely noticeable typical conditions addition typical conditions outperformed strong strong benchmarks illustrate difficult workloads outperforms rarer people surprised learn operation unlinks nodes contained element heres link href http hg openjdk net jdk8 jdk8 jdk file jdk8 b132 src share classes util linkedlist l444 rel nofollow code jdk change dates back change appeared jdk change tracked bug href https bugs openjdk net browse jdk rel nofollow jdk change slightly earlier clears previous references individual nodes theyre unlinked list test case bug report interest problem make creates garbage nodes faster garbage collector reclaim eventually jvm run memory fact garbage nodes linked effect impeding garbage collector making easier mutator threads outstrip collector threads clear important multiple threads mutating list test case synchronize list actual parallelism change unlink nodes makes easier collector work apparently makes test longer run memory fast forward code facelift tracked bug href https bugs openjdk net browse jdk rel nofollow jdk discussed href http mail openjdk net pipermail core libs dev november html rel nofollow email review thread original motivations facelift reduce operation unlinking nodes unnecessary bugs submitter unnecessary discussion decided unlinking behavior provided benefit garbage collector retain document comment unlinking nodes blockquote free memory reachable iterator blockquote refers pathological case iterator points linked lists nodes list cleared iterator node alive node previous references nodes list alive unlinking nodes lets collected pretty pathological rare iterator stored field iterators created discarded single method single loop dont fundamental reason unlinks nodes entire jdk code base maintained consistently good practice unlink nodes alas case happened customer ran pathological behavior change made observed similar behavior impetus update 