tool monitor log system metrics automated performance tests 
application spring integration core created performance tests processing speed msgs sec generated input types process automated test run separate instance created cloud disposed amp output artefacts copied performance tests monitored run basic system metrics cpu memory gc runs time result csv files metrics readings question strong good configurable tools purposes strong middle investigation profiling tools reviewed require human interaction ui oriented option writing separate tool access mxbean amp log data performance tests wondering good application running tomcat performance tests spring integrations file endpoints switchable component application solution application agnostic external tools solution 

command line tools kind scenario strong linux solaris strong based environment ol li run trigger jvm spring based application run tools background mode output redirected flat file helps capture cpu memory statistics options thread level statistics hitting performance problem bottleneck analysis li li run jvm arguments write jvm verbose output flat file print gc statictics debugging options section jvm arguments href http www oracle technetwork articles vmoptions jsp html rel nofollow hotspot vm options options li ol em tip em create shell script combining commands run time achieve requirement strong windows strong environment ol li os statistics gathering commandline typeperf tracerpt csv supported li li run jvm arguments write jvm verbose output flat file print gc statictics debugging options section jvm arguments href http www oracle technetwork articles vmoptions jsp html rel nofollow hotspot vm options options li ol 