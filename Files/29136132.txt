implementing shifting hessenberg functioning slow qr algorithm 
tldr make function bottom interview didnt smoothly decided write library prepared asked matrix multiplication sacrifice performance libraries made purpose point learn cuff handle virtually matrix algorithm learn find answers dont flesh understanding language set library accomplished final part eigenvalues implemented fairly basic qr decomposition method work read compare bunch random matrices library output trusted calculators problem orders magnitude slow 50x50 matrix takes minute eigenvalues set iterations handle pathological case testing id reduce number iterations order matrix sufficient make converge looked web found book talking advanced qr methods basically understand paper convert matrix upper hessenberg form converge orders magnitude faster implement shifting converge quadratically read implemented algorithms make convergence faster problem fails previous problem test case spitting wrong eigenvalues silently edit tested hessenberg function work arbitrary matrices spits numbers matlab wolfram add step number iterations math stack exchange underlying algorithm shifting part killing dont understand book paraphrasing limited math understanding matrix put hessenberg transformation eigenvalues shifting implement algorithms eigenvalues change problem implemented algorithm incorrectly misunderstanding math paper talking reference href http people inf ethz ch arbenz ewp lnotes chapter3 pdf rel nofollow http people inf ethz ch arbenz ewp lnotes chapter3 pdf edit repository link rest code code depends href https github rwthompsonii matrix rel nofollow https github rwthompsonii matrix edit relevant function rules edit snarkiness lot crap clean bunch print statements debugging dont step iterations values id working clean meet fairly decent standards readability refactoring function simply long work guy 

good step scrap rayleigh quotient shift method wilkinson shift double shift method straight forward reduction hessenburg form working algorithm pg href http people inf ethz ch arbenz ewp lnotes chapter3 pdf rel nofollow reference case youve fixed number iterations simple begin calculate householder reflectors definition page involving vector norm rho real case commonly sets text work simple 2x2 paper 3x3 youre keen calculations step step ensure theyre correspondence hand written work check youre running floating point issues finally dont upset code doesnt find eigenvalues arbitrary 50x50 matrix drop hat implementations reductions heavily optimized rarely verbatim translations pseudocode youll find literature check libraries href http www sagemath org rel nofollow sage href http www numpy org rel nofollow numpy python href http www boost org rel nofollow boost fun work kind problem 