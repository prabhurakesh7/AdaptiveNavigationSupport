creating game game modes settings handle settings 
creating game play computers humans multiple advanced settings variety games large quickly adding settings write clean code strong face problem write lot unnecessary checks optional mutual exclusive options strong unnecessary game created specific settings options checks redundant reasons continuously checking game computers humans mix strong builder pattern strong solve problem parameters pass constructor optional create game solves problem hard time constructing game requires lot checks time game run settings set leads hr h2 code illustration h2 creating game requires words list players couple optional settings game created computers humans mix game based options things happen code write couple statements method code prevent strong program decision tree time specific point program game created specific strong youre specific branch tree create game humans weird thing checking turn player human human player created game place hope make point clear full code written 

approach avoid checks subclassing implementing hook methods idea borrowed hooks instance imagine class children youd implement common logic abstract methods implemented children classes encapsulate common logic implement specific behavior kind configuration game messing code lots checks main game logic idea approach depends current scenario 