comparison reactive frameworks 
frameworks libraries claim build reactive applications akka vert rxjava reactor qbit approaches features pros cons find detailled comparisons documentation framerwork understand differences differences major reactive frameworks application requirements drive choice reactive framework time 

working rxjava href http akarnokd blogspot hu comparison reactive streams html evaluations akka streams reactor recently libraries converge single concept called href https github reactive streams reactive streams jvm reactive streams back implementations strong rxjava strong generic dependencies libraries opinionated concurrency popular android due support libraries frameworks retrofit branch doesnt implement reactive streams wrappers natively reactive streams compliant preview popular jvm based programming languages adaptors scala kotlin clojure strong reactor strong reactive streams compliant recent library dependencies support lot libraries chose set tradeoffs concurrency queueing streams lmax disruptor style back rxjava operators weve started talking shared pool operators strong akka strong highly dominated scala concepts small trouble work team involved developing reactive streams specification akka streams library advertised support reactive streams accessing cumbersome fluent api heavily intertwined akka actor model server desktop android side rxjava generally good choice documented aimed high throughput asynchronous operations latency side reactor choice dont usages akka streams benchmark year ago web server built akka outperformed tomcat netty rxjava 