bean pojo di container 
dont remember read pojo managed dependency injection container hold true context stands strong edit strong href http stackoverflow answer doesnt mention di container managed di container isnt required condition class 

javabeans standard predated di frameworks originally prevalent case supporting drag drop components delphi vb component palettes reusable widgets dragged form wired support things propertyeditors property sheets visual programming environments huge back market party components sun wanted similar people started conceiving di frameworks needed predictable set dependencies managed objects appropriated existing standard href https books google books id n6vefdjws3ic amp pg pa719 amp lpg pa719 amp dq javabeans 20rod 20johnson 20expert 20one 20on 20one 20j2ee 20design 20and 20development amp source bl amp ots z9oot0jrgn amp sig mbny2tgy9u39sf7flzoil3185se amp hl en amp sa amp ei vzkdveeqasj3yqs pzoaca amp ved 0cfqq6aewbw onepage amp javabeans 20rod 20johnson 20expert 20one 20on 20one 20j2ee 20design 20and 20development amp false rel nofollow rod johnsons em expert j2ee design development em blockquote make application components javabeans maximize ability separate configuration data application code ensure application components configured consistent configuration data held blockquote term href https en wikipedia org wiki plain object rel nofollow pojo coined idea describing code explicit dependencies framework blockquote ideally speaking pojo object bound restriction forced language specification blockquote poster child ejb prior version invasive dependencies framework classes inhibited container testing di frameworks interested providing functionality transparent noninvasive javabeans provided common standard pojos order expose configuration good match 