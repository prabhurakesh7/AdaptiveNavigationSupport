improving speed memory consumption handling arraylist million elements 
work text files short strings digits size file approx 5gb number rows reaching millions day file extract elements tens thousands day whats approach solve problem load data arraylist takes seconds file substraction arrays takes forever code load data hashsets creation hashsets endless linkedhashset load arraylists sort didnt speed process memory consumption high sort finishes heap 15gb 13gb good linux util diff finished task minutes eating 8gb ram goal solve problem hour processing time consumption 15gb 10gb suggestions alphabetic sorting arraylist strong update strong country wide list invalid passports published global list extract delta data unsorted row unique compare 100m elements 100m elements dataline converting integer interesting increased maximum heap size 16gb loading hashset fast seconds file program killed system memory killer eats enormous amounts ram loading file hashset arraylist code simple file program killed memory kill process score sacrifice child killed process total vm 20177160kb anon rss 16074268kb file rss 0kb strong update2 strong ideas final solution converting lines long fastutil library longopenhashset ram consumption 6gb processing time seconds interesting observation starting default settings made loading million strings jdks native hashset endless interrupted hour starting xmx16g speedup process minute memory consumption ridiculous 20gb processing speed fine minutes limited ram native jdk hashset bad terms speed task explained opportunity load file doubt memory consumption lowered 

dont pass holds unnecesserily huge amounts data hold lines times read files line line process immediately cuts memory usage lot youll end sets data present dataset presize containers size doubles reach capacity potentially create lot overhead dealing big collections data numbers hold hold instances lot collection libraries enable koloboke hppc hppc rt gs collections fastutil trove collections serve standard lot unnecessary object allocation 