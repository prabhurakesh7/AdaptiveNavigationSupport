quickest escape recursion 
cleanly quickly escape recursion break statement equivalent pattern method escaping recursion spawning separate thread computed simply killing thread bubbling recursion stack question discusses break recursion href http stackoverflow questions breaking recursion quicker achieving possibly back stack statement criteria considered ul li ease refactoring escape li li raw performance faster li li length practice quicker write add li ul answer explain performance simplicity solution asked context algorithmic competition solutions require refactoring prefered strong strong coding algorithmic competition return inside recursion faster kind break algorithm 

answer question simple usual unwinding stack slow computation recursion highly trivial stack depth high returning influence runtime algorithm noticeably basically options ul li transform algorithm iterative li li transform algorithm end recursive hope vm reuse stack frame returning recursion virtually equal simple return li li throw exception slower returning stack trace built ultimatly traverses stack stack unwound check es win li ul options viable honestly dont returning deep stack part makes algorithm slow algorithm deep recursion problem stack overflow costs recursive calls rewrite algorithm stack depth low issue simple test program show computes recursive function stack depth equal input parameter function computes square root stack fram simulate trivial computation computes function iterative warm jit program executed times printing result tenth result printed results increase stack size gigabyte results machine takes millisecond return stack depth million larger stack sizes longer times possibly due stack longer fitting l3 cache large stacks problem running gigabyte max stack size idea stack size measurable milliseconds sane algorithm stack smaller fine fastest solution iterative deep recursion slow avoid completely skipping return strong conclusion strong em recursion slow rid completely skipping return wont make big difference em 