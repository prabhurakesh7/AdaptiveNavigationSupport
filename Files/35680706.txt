good reasons choosing invariance api stream reduce 
reviewing api design surprised generic invariance href https docs oracle javase docs api util stream stream html reduce util function bifunction util function binaryoperator rel nofollow arguments seemingly versatile version api applied covariance contravariance individual references isnt workaround method references coerce types target type doesnt problem href https msdn microsoft en library bb534647 aspx rel nofollow defined declaration site variance means api behaviour free pre class lang prettyprint override advantages possibly reasons decisions existing design suggested design asked differently caveats suggested design overlooking type inference difficulties parallelisation constraints constraints specific reduction operation associativity anticipation future javas declaration site variance 

crawling history lambda development isolating reason decision difficult eventually wait developers answer question hints ul li stream interfaces undergone iterations refactorings earliest versions interface dedicated methods closest method question called href http hg openjdk net lambda lambda jdk file 682e571b428a src share classes util streams stream l92 rel nofollow back received parameter li li interestingly lambda proposal included dedicated interface counterintuitively function nowadays referred interface href http hg openjdk net lambda lambda jdk rev 433c67388856 rel nofollow replaced revision li li striking similarity question found href http mail openjdk net pipermail lambda dev april html rel nofollow thread signature mailing list turned general question variances stream method signatures fixed places blockquote brian correct blockquote noticed places blockquote strong fixed binaryoperator bifunction flexibility strong strong comment binaryoperator strong blockquote emphasis li ul hr justification found strong strong replacing eventually href http mail openjdk net pipermail lambda dev april html rel nofollow response statement thread blockquote binaryoperator replaced bifunction introduce flexibility binaryoperator parameters return type conceptually weight votes blockquote dig perticular reference vote expert group governed decision quote sufficiently answers question 