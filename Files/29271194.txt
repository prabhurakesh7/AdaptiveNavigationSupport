memory model create cyclical reference graph final instance fields assigned thread 
understand memory model confirm understanding code correctly synchronized understand code correct havent worked em em math find informal quotations suggest lawful bit wary completely relying blockquote usage model final fields simple set final fields object objects constructor write reference object constructed place thread objects constructor finished object thread thread correctly constructed version objects final fields versions object array referenced final fields date final fields href https docs oracle javase specs jls se7 html jls html jls em language specification se edition em section blockquote reference blockquote object properly constructed simply means reference object constructed allowed escape construction construction techniques examples words place reference object constructed thread assign static field register listener object tasks constructor completes constructor href http www cs umd pugh memorymodel jsr faq html finalright em jsr memory model faq em final fields work jmm blockquote 

code introduce data race synchronized correctly objects classes visible fully initialized state thread accessing objects href http www slideshare net vladimirsitnikv final field semantics rel nofollow straight forward derive formally ol li thread constructing threads observed field values consistent em program order em em intra thread consistency em constructing handed observed correctly trivial memory model regulates single threaded memory orderings li li thread hold instance referenced read field introduces em dereference ordering em reading address object dereferencing objects field pointing instance li li thread capable observing instance altogether formal terms exists em memory chain em thread guaranteed observe fully constructed meaning field fully initialized li ol matter instances field instance read adding modifier hurt documents intentions add memory model wise jsr cookbook quoted describing implementation memory model memory model points strict day openjdk longer align implementation implement strict model fulfills formal requirements strong code implementation code specification strong rely memory barrier constructor hotspot implements things guaranteed stay differ hardware architectures quoted rule reference em escape em constructor narrow view problem escape thread hand virtually dispatched method longer control instance end bad practice constructors dispatched virtually safely create circular references manner depicted assume control future shared code base document tightly constructor reference slip 