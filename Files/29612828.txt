round robin scheduling algorithm atomicboolean 
implement strict round robin scheduling send requests external system external system servers request system1 request system2 system1 servers send request maximum performance blocking context switch atomicboolean makes cas operation implementation classes strong roundrobintest strong strong roundrobinlogic strong class static atomicboolean object strong output strong hr hr requests server atomicboolean fails scenario application threads accessing shared object time concurrency practice em high contention levels locking outperform atomic variables realistic contention levels atomic variables outperform locks lock reacts contention suspending threads reducing cpu usage synchronization traffic shared memory bus em em low moderate contention atomics offer scalability high contention locks offer contention avoidance cas based algorithms outperform lock based single cpu systems cas succeeds single cpu system case thread preempted middle read modify write operation em strong questions strong ol li efficient blocking achieve round robin request sending li li heavy contention atomicboolean fail understand performance throughput due heavy contention atomicboolean fails li ol 

johns answer cleaner slightly efficient implementation removes compare current extend additional systems fairly easily 