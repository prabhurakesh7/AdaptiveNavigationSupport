nested synchronized block 
lets imagine classes change state objects method rewrite method strong synchronized strong block 

unusual understand goal protect account balance corrupted multiple threads attempting credit debit account time goal money transfer ensure credit debit actions occur transaction atomically synchronizing approach synchronized block exception occur lose guarantee actions occur atomically implementing transactions complex topic databases strong edit strong em op asked difference synchronized block mux synchronized account class em fair question differences main difference ironically strong strong synchronizes words single synchronized block performance worse potentially bank accounts lets money transfers initiated exact time ol li money transfer account account li li money transfer account account li ol agree money transfers occurring completely separate accounts harm risk corruption executing money transfers time money transfers execute mine money transfers occur simultaneously safely block money transfers attempt touch accounts imagine code process hundreds thousands concurrent money transfers doubt perform lot retaining thread safety protecting correctness accounts balance effect version code conceptually behaves lot original synchronized block code improvements ul li fixes potential deadlock scenario li li intent clearer li li encapsulation meaning code method debit credit amounts retain thread safety case version design absolutely guarantees li ul 