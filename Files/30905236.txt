interfaces valid substitute utility classes 
past decade pattern utility classes class static methods fields declared extended constructor instantiated introduction href https docs oracle javase tutorial iandi defaultmethods html static static methods interfaces find utility interface pattern rid constructor lot keywords implicit interfaces downsides approach benefits utility class utility interface 

based person coined constant interface pattern anti pattern dont intend client implement interface possibly easier strong shouldnt allowed strong blockquote apis easy hard misuse easy simple things complex things strong impossible difficult wrong things strong blockquote mentioned depends target audience hr lot easy designs patterns lot criticism context pattern singleton pattern constant interface pattern heck design principles law demeter criticised verbose id hate kinds decisions opinion based context pattern anti pattern em apparent mainstream frameworks spring android sdk em boils environment target audience strong main downside find strong listed listing downsides href https en wikipedia org wiki constant interface rel nofollow constant interface wiki blockquote binary code compatibility required future releases constants interface remain forever interface converted class strong interface conventional sense strong blockquote figure hey isnt contract enforce stronger design change wont care change future top code clarity mentioned tagirvaleev interfaces intent implemented dont implement api youre supplying dont make implementable revolves target audience statement gonna lie verbose foundation depends code wouldnt wanna constant interface code reviewed 