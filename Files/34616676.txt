call ugi checktgtandreloginfromkeytab action hadoop 
server application connecting kerberos secured hadoop cluster application components hdfs file system oozie hive application startup call returns instance application lifetime priviledged action launch works fine renew kerberos ticket found method ticket renewal close expiry found method called hadoop tools server application possibly running months years experience ticket expiry approach provide concrete questions ol li rely hadoop clients call needed li li call code li li single call setup timer call periodically li ol 

hadoop committer excellent question difficult give definitive answer deep dive usage patterns application offer general guidelines describe hadoop handle ticket renewal login keytab automatically wouldnt primary case kerberos authentication hadoop ecosystem hadoops rpc framework sasl authentication daemon processes hadoop ecosystem handle single time call process startup examples include hdfs datanode authenticate rpc calls namenode yarn nodemanager authenticate calls resourcemanager daemons datanode time login process startup running months long past typical ticket expiration times common case hadoop implements automatic login mechanism directly inside rpc client layer code visible rpc href https github apache hadoop blob release hadoop common project hadoop common src main org apache hadoop ipc client l657 l662 rel nofollow method lazy evaluation login executes login response authentication failure attempted rpc connection knowing give partial answer applications usage pattern login keytab perform typical hadoop rpc calls roll login code rpc client layer typical hadoop rpc means vast majority apis interacting hadoop including hdfs href http hadoop apache org docs r2 api org apache hadoop fs filesystem html rel nofollow api href http hadoop apache org docs r2 api org apache hadoop yarn client api yarnclient html rel nofollow mapreduce href http hadoop apache org docs r2 api org apache hadoop mapreduce job html rel nofollow submissions application usage patterns involve hadoop rpc applications interact solely hadoops rest apis href http hadoop apache org docs r2 hadoop project dist hadoop hdfs webhdfs html rel nofollow webhdfs href http hadoop apache org docs r2 hadoop yarn hadoop yarn site webservicesintro html rel nofollow yarn rest apis case authentication model kerberos spnego hadoop href http hadoop apache org docs r2 hadoop project dist hadoop common httpauthentication html rel nofollow http authentication documentation knowing add answer applications usage pattern utilize hadoop rpc sticks solely rest apis roll login logic href https github apache hadoop blob release hadoop hdfs project hadoop hdfs src main org apache hadoop hdfs web webhdfsfilesystem l483 rel nofollow calls noticed chooses make call operation fine strategy href https github apache hadoop blob release hadoop common project hadoop common src main org apache hadoop security usergroupinformation l980 l983 rel nofollow renews ticket close expiration call op final case lets interactive process logging keytab requiring user run externally launching application vast majority cases short running applications hadoop cli commands cases longer running processes support longer running processes hadoop starts background thread renew kerberos ticket close expiration logic visible href https github apache hadoop blob release hadoop common project hadoop common src main org apache hadoop security usergroupinformation l872 rel nofollow important distinction compared automatic login logic provided rpc layer case hadoop capability renew ticket extend lifetime tickets maximum renewable lifetime dictated kerberos infrastructure ticket wont usable anymore login case practically impossible imply prompting user password walked terminal means process running expiration ticket wont authenticate anymore information inform answer rely user login interactively launching application youre confident application wont run longer kerberos tickets maximum renewable lifetime rely hadoop internals cover periodic renewal youre keytab based login youre applications usage pattern rely hadoop rpc layers automatic login conservative approach roll samsonscharfrichter gave excellent answer rolling href http stackoverflow questions hbase kerberos connection renewal strategy hbase kerberos connection renewal strategy finally add api stability href https hadoop apache org docs current hadoop project dist hadoop common compatibility html rel nofollow guidelines discuss hadoop development communitys commitment backwards compatibility full detail interface annotated technically means api considered public evolve backwards incompatible ways practical matter lot code depending interface simply feasible make breaking change current release line fear method signatures changing breaking code background information lets revisit concrete questions blockquote rely hadoop clients call checktgtandreloginfromkeytab needed blockquote rely applications usage pattern call hadoop clients turn utilize hadoops rpc framework rely applications usage pattern calls hadoop rest apis blockquote call checktgtandreloginfromkeytab code blockquote youll applications usage pattern solely call hadoop rest apis hadoop rpc calls benefit automatic login implemented inside hadoops rpc client blockquote single call ugi doas setup timer call periodically blockquote fine call action authenticated ticket close expiration method op youre suspicious kerberos infrastructure sluggish dont client operations pay latency cost login reason separate background thread stay bit ahead tickets actual expiration time borrow logic inside determining ticket close expiration practice personally latency login problematic 