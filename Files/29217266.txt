entering synchronized block atomic 
guaranteed synchronized block atomic imagine case thread object shared variable imagine thread change reference object imagine threads competing lock object happened br thread1 read object br threadm modify object reference amp release object lock br thread2 read object check lock lock br thread1 check lock cos object read lock br threads lock modify object question guaranteed synchronized object steps atomic depicted step 

em em reassign synchronized scenario reassigning field locking good idea thread acquire lock thread exits synchronized block thread acquire lock object visible thread modifications made thread releasing lock guaranteed visible threads acquire lock reassigning lock acquiring thread changed acquire lock reassigned declaring variable ensure current locking wouldnt prevent threads modifying instance concurrently ol li thread acquires lock thread reads li li thread li li thread releases lock thread reads li li thread acquires lock thread acquires lock li li thread reads thread reads li li thread modifies thread modifies li ol avoid create separate object locking change 