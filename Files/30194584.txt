spliterator trysplit return type 
stumbled interesting detail method trysplit supposed return instance spliterator split doc appears perfect place javadoc reasons optional googling href http mail openjdk net pipermail lambda dev december html rel nofollow question lambda dev mailing list answered 

couple reasons conceptually return design forces pushed reason difference methods return methods return null ul li methods called return values em application em code li li methods called return values em library em code li ul design aspect jdk class libraries library apis designed make things easier application code library code complexity order make things simpler applications main reasons avoid passing nulls library application code improper null handling common source apis return empty supported rich set methods provide great deal flexibility applications dealing found case nullable return opposite direction application library application code pass return nullable em library em considerably error prone application receive nullable em library em youre writing application api pass return null library possibility generate npe em em code variety places apis mind semantics api called places library library maintainers taking burden dealing properly cases prime consideration performance splitting critical path setting parallel pipeline performed sequentially work handed threads executed parallel href http en wikipedia org wiki amdahl 27s law amdahls law order make parallelism efficient minimize sequential setup overhead fact box cost boxing unboxing jit compiler em em optimize cases period time code running hasnt optimized additional overhead library code bear burden handling properly guarantee boxing overhead simply case 