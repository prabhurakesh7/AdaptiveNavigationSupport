repository pattern understand work complex entities 
hard time understanding repository pattern lot opinions topic href http www codeproject articles repositorypluspattern cplusdoneplusright repository pattern stuff href http ayende blog repository singleton repository singleton href http thinkinginobjects dont dao repository dont dao repository href http fruzenshtein spring jpa data hibernate mysql spring jpa data hibernate mysql maven repository appears dao object tired reading stuff imho hard thing displayed lot articles appears takes objects passes basically guy em em entity stored assume composition tools em pseudo code em thing part object client understood write method em store em tutorial pass whats bothering id steps ol li check li li owned br valid id convert create database entry br convert save database create entry li li checking instanciate entity set persisting database li ol complex simply service function interface client handle thinking creating question ul li entity object object li li case allowed em em repository objects save store inside br doesnt break repository pattern pattern basically layer service orm framework feel add dependencies classes due dependency reasons li ul dont head sound em em complicated thing bothering dont makes em em easier hibernate dont benefit question long question put days research existing code working starts mess pattern hope give bigger picture articles tutorials implementing simple repository pattern 

read repository dummies href http blog sapiensworks post repository pattern dummies aspx rel nofollow post understand simple strong principle strong repository problem youre working dtos scenario dont repository pattern youre dao main difference repository dao repository returns objects strong understood calling layer strong time repository business layer returns business objects dao returns data business object data isnt valid business concept business objects data structures hint modeling problem bad design repository makes sense rich properly encapsulated objects youre loading saving data structures dont repository orm youre dealing business objects composed objects aggregate object parts order strong consistent strong aggregate root repository pattern solution abstract persistence details app product repository return tables queries required restore object based code sample dont real business objects data structures hibernate business object designed based business concepts cases repository makes bl care object persisted repository acts converter mapper object model persisted basically repo reduces objects required persistence data business object strong strong orm entity em em technical point view design pov models business stuff models persistence stuff cases directly compatible biggest mistake design business object storage mindset contrary devs orm purpose persist business objects purpose simulate oop database top rdbms orm mapping db objects tables app objects dealing business objects tables 