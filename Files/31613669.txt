performance particle system 
strong situation strong created particle system javafx technique particle imageview image radial gradient href http stack imgur qcrxe png rel nofollow img src http stack imgur qcrxe png alt enter image description particle handling loop animationtimer list particles handled lists stream parallel method system boost particles color coloradjust lifecycle fire colors testing particles href http stack imgur g0z4h jpg rel nofollow img src http stack imgur g0z4h jpg alt enter image description learned ul li parallel slower li li circle transparency slower imageview li li blend mode slow li li pixelwriter change image color unbearable slow question arises coloradjust change color d3d amp hardware havent found mechanism javafx source code li ul strong question strong implement particle system javafx node types thread performance post code toy expertise hr edit asked full code nodes particles coloradjust href https gist github roland09 70613cb5746dcedd4828 rel nofollow gist btw pre render images dont coloradjust performance low question theoretical kind digging code isnt 

em add em answer question hope experience share knowledge result toying painting canvas javafx imageview nodes surprisingly resulted factor 10x speed increase basically ul li pre calculate images gradients color size depending particles lifespan li li animation timer pre calculated image paint canvas li ul interested full code href https gist github roland09 8375df8b01f453bcae71 rel nofollow gist click download zip put code zip application package javafx project start main class difference code question particle class question particles nodes moved animation timer answer data drawing image canvas animation timer node isnt put scene settings class order resolution number particles frame screenshot shows repellers strong strong particles screen full hd resolution running 60fps href http stack imgur au9sq jpg rel nofollow img src http stack imgur au9sq jpg alt enter image description 