spring rest hibernate application design 
strong environment strong spring rest spring mvc hibernate strong issue strong developing application stack href http stack imgur rr8o9 png rel nofollow img src http stack imgur rr8o9 png alt enter image description spring rest web service expose apis client display ui asp net response json scenario client calls rest api user id dao layer fetches user entity delievred client issues observations scenario ol li user entities related throgh hibernate mapping userroles onetomany entities fetched lazyinitialization exception thrown ui access collections user object li li properties user object required response requests wont roles user li ol picture mind design approach send user object response client spring rest ol li create intermediate layer objects dtos mimicking entity objects dtos populated service layer requirement service layer runs inside transaction issue number resolved requires extra copying entity dtos li li handle issue number hibernate entity query level join fetch queries revamping mapping exclude properties required response annotations jsonignore approach flexible requires careful design entity classes li ol comment alternative 

strongly recommend dtos level reasons ol li point rest representation matched completely dao entity examples ul li return full list lightweight user info user mobile version app li li provide user info loaded dao payment account info retrieved separate service li li combine combine information separate dao entities service call li li li ul li li strong caching strong data 3rd party library ehcache hazelcast simple map structure custom serialization hibernate entities big pain entities complex relationships li li dto level service interfaces dtos interface client library integration components modify completely redesign dao layer implementation switching sql solution li ol conclusion hibernate entities rest api works fine simple world apps doesnt work real life solutions 