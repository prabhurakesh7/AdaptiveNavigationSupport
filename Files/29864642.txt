objects requirenonnull efficient 
jdk happily method introduced reject values passed method accept method makes tidy code easy read encourage colleagues knowledgeable colleague resistant efficient calling involves placing method jvm call stack result worse performance simple check question strong evidence strong performance penalty incurred methods 

lets implementation oracles jdk strong simple strong jvm oracles includes optimizing stage time compiler convert bytecode machine code inline trivial methods performance slower meaningful matter blockquote question strong evidence strong performance penalty incurred methods blockquote evidence matter performance measurements em em codebase code designed highly representative em em test decent performance testing tool colleague point real world performance problem codebase related method synthetic benchmark id tend assume bigger fish fry hr bit noticed sample method method code team writing calls directly situations case href http docs oracle javase docs technotes guides language assert html rel nofollow assertions runtime checks assertions advantage executing released code faster alternative question places runtime checks gatekeeping points public methods fwiw 