update objects atomically lock free manner 
working class implements hash code based atomic locking multiple objects main purpose unpark waiter thread required locks reducing waiting time returns single composite lock involves listed objects caller finishes job calls main components strong strong common lock table array showing locks held strong strong deque waiter threads algorithm simple ol li thread calls marked parking em waiter object em state thread created added tail queue method invoked li li traverses deque starting head find waiters acquire locks waiter found lock table updated waiter state changed removed deque waiters thread unparked traversal current thread marked parking parked li li called composite lock lock table state updated invoked li ol avoid race conditions strong update state lock table performed atomically update state waiter strong achieved synchronization common exclusive works id implement similar mechanism free lock manner cas operations making waiter queue lock free pretty simple step problematic step href http en wikipedia org wiki double compare swap rel nofollow dcas isnt supported achieved strong update queue node strong change waiters state mark deletion strong atomically update object strong lock table cas dont code hints approaches 

implement multi word cas cas dependent performance hit order achieve harris href http www cl cam ac uk research srg netos papers casn pdf rel nofollow http www cl cam ac uk research srg netos papers casn pdf 