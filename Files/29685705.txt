permanent persistent socket connection 
created client server connection chat system previously loop client side waiting read message console time server loop serve forever create connection beginning session occasionally send message session maintain permanent persistent connection loop client closes connection dont find workaround client code server code 

summarize good practices stability tcp ip connections apply daily basis h1 good practice built alive h1 automatically sends signal period inactivity checks reply alive interval operating system dependent shortcomings improve stability connection h1 good practice sotimeout h1 whenver perform case thread block forever experience bad practice reasons difficult close application calling dirty clean solution simple read time 200ms method method timeouts throw subclass implement loop condition set true thread die peacefully h1 good practice tcp delay h1 setting interfacing small commands handled quickly h1 good practice heartbeat h1 lot side scenarios covered server applications designed communicate client time accept connections accept messages reply lose connection long time os notices possibly due shortcomings em good practice em complex network situations rs232 ethernet converters vmware servers solution create thread sends message seconds waits reply seconds create thread sends message seconds expand code em good practice em bit decide client server send message decision important client sends message client additional thread send message server send reply receives message client receives answer code parties check long similar 