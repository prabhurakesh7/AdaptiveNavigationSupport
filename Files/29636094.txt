microservices communication 
studying microservices facing problem strong context strong developping microservices ul li user management spring based mysql database li li planning management asp net based sqlserver database access point service api listing restul endpoints planning day userid planning startdate enddate iduser li li billing management nodejs based mongodb database li ul strong problems strong ol li permit accessing planning information user service couple services knowing planning service accessed li li access billing informations billing service user mysql database microservices coupled point killing coupled referencing iduser billing billing api expose precisely microservices communicate coupled li li create authentication duplicating authentication requests authentication service services li ol advance advance 

important thing recognize implementing user authentication user authorization user session management solutions arent significant conceptual differences solutions micro service architecture form distributed systems architecture conceptually solution implementation href http en wikipedia org wiki kerberos 28protocol rel nofollow kerberos protocol notion ticket token commonly called today passed establish identity users case user management service serve backend authentication authorization server services aware user management service responsible issuing verifying user tokens establish users identity roles blockquote permit accessing planning information user service couple services blockquote user access net service service rely user management service establish users identity words net service user management service url utilize tools href https github coreos etcd rel nofollow etcd href https nats io rel nofollow nats propagate location user management service rest ecosystem coupling microservices blockquote access billing informations billing service user mysql database blockquote simplest solution pass single key user id query parameter url billing service billing service implemented expect key appended url additional keys included billing dates order status utilized href http memcached org rel nofollow memcached href http redis io rel nofollow redis store information runtime trade offs adding single point failure ecosystem blockquote create authentication duplicating authentication requests authentication service services blockquote user authenticated identity information stored href http memcached org rel nofollow memcached href http redis io rel nofollow redis avoid repeating authentication authorization process 