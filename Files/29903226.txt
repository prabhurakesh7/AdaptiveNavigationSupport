recursion return keyword 
working tutorials recursions code calculates factorial number passed factorial method trouble understanding part understanding return keyword simply terminates method returns type declared method int string line run function returning total give passing iteration total number derived method variables store sum values program storing values derived calculated explanation greatly appreciated 

youve misinterpreted values multiplied words rewrite pass equivalent equivalent equivalent works easily step code debugger ol li call function passes function evaluates calls passing state function call preserved stack call returns resume left result function call stack abstraction understand recursion li li function call evaluates calls passing li li function call evaluates calls passing li li fourth function call evaluates returns li li function call resumes multiplying return function returned argument returning result li li function call resumes multiplying return function returned argument returning result li li function call resumes multiplying return function returned argument returning result li ol optimizing compilers change recursive calls loops generally change recursive call fixed expression compile time dont generally deep recursion abundantly clear modify code step debugger recursive call store state suspended method waiting result call stack reason method calls recursively chain methods call mutual recursion possibility stack full stack overflow caused incorrect logic function causing recursive loop caused function doesnt logically loop calls times data passed recursive functions working tree data structures tree tall stackoverflow arguments call youre fine throw exception vm implementation limitations calling possiblestackoverflow integer max throw stackoverflowexception 