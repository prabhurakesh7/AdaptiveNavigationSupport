dependency injection 
stackoverflow moderators close question answer good reason object application context suppose dependency injected h2 debatable arguments h2 h3 polluting object spring specific object h3 people complain application context bind implementation spring stuffs trivially solved creating indirection applicationcontext exemplify h3 hard change implementation h3 dependency object easily changed application context easier mock insert directly usual mutator h2 historical question h2 long time ago world service locator directory service technology called jndi interchangeable object infrastructure bind directory service kind objects serializable data reference dircontext additionally objects distributed environment spring revolution di dependency injection cases service locator pattern prohibited spring instance applicationcontext beans service locator spring framework big factory objects centralized configuration dependency injection facility directory services easily handle part forgotten h2 related question h2 href http stackoverflow questions springs applicationcontext getbean considered bad spring applicationcontext getbean considered bad answers edifying enlightening points raise 

personal view ease di annotation versus bean applicationcontext end day main difference dependencies located service location entails client code request related specific dependency dependency injection container creates objects injects dependency constructor parameters frankly end day feasible jndi lookup pretty expensive terms performance ultimately advised cache 