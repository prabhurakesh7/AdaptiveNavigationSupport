obtain current tai time 
obtain current tai time milliseconds linux reason accurately timestamps long period time order years compare worrying leap seconds multiple measurements place leap measurements unambiguous monotonically increasing linearly increasing dedicated linux server scientific project precision seconds invest gps timekeeper hope ntp pool ntp org order system clock track looked solutions strong threeten project strong obtain taiinstant instant convert specs conversion instant completely accurate leap accordance utc sls big deal fact utc sls acceptable instant class wrapper system currenttimemillis makes leap time ambiguous project give tai time specifications state blockquote implementations time scale jsr api strong required provide clock accurate progresses monotonically smoothly strong implementations required perform utc sls slew aware leap seconds blockquote strong timezone strong work implementation smart continue working leap system currenttimemillis give tai time words underlying implementation utc giving ambiguous time leap converted tai timezone work tai system currenttimemillis leap strong clock tai strong clock tai linux kernel found completely identical clock realtime test code output simply strong clock monotonic strong problem timestamps remain valid comparable computer restarts 

addition correct accepted answer mention free strong library time4j strong href https github menodata time4j rel nofollow min version v4 solution ul li written fill gap world li li answers talk asked li li works principles user3427419 li ul monotonic clock based custom implementations interface purpose calibration sntp clock named simple configuration connect ntp time server built leap table time4j show announced leap end month iso notation formatted local timestamp string timezone i18n module recalibration case ntp reconnect clocks meaning clocks adapted intermediate time adjustments strongly recommend measurements leap reconnect sntp clock time stepping back cases time4j apply smoothing algorithm activated clock configuration ensure monotone behaviour detailed documentation href http time4j net javadoc en rel nofollow online strong strong doubt based solution simple code demonstrations studied href https dzone articles watch coming leap rel nofollow dzone hr strong update answer question comment strong slightly simplified solution automatically download ietf resource leap seconds translate time4j specific format em notes em recommend write code subprogram called simple batch program order avoid main program dependent internet connectivity batch file finally call main program mentioned system property set href http time4j net javadoc en net time4j scale leapseconds html path leapseconds rel nofollow property leap seconds read file eventually tzdata module stop yield concurrent leap informations 