running processes concurrently 
simulating banking system transactions run type transaction implements runnable types transactions occur array runnables ideally code solve issue bound occur attempting start threads implementing executorservice create thread pool manage runnables approach long processes hog jvm type transaction takes seconds execute profiling application threads allowed run long transaction takes place img src http stack imgur xxmsi png alt case thread threads run single transaction complete case thread threads run processing complete question run transactions fast running memory problems executorservice answer stop long transactions hogging jvm transactions run concurrently strong edit strong forcing types transactions occur seconds purpose ensure threaded program working correctly transaction locks single account accounts method hogs jvm called time transaction run account locked leaving processing strong jvm process threads hangs long transaction finishes strong link minified version project demonstrate problem href https www dropbox 6iarxunlkk82mij 2eminified zip dl rel nofollow project 

problem application threads assigned transaction account thread wait screenshot paused application thread pool thread handling transaction account object id id account id unique object id eclipse assigns threads waiting lock account object account object id img src http stack imgur ebplf png alt screenshot debugger happen transaction thread starts long running transaction account threads continue work transactions threads reaches transaction account stop wait transactions account blocks thread time threads blocked quad core solve depends case actual program guaranteed incoming transaction account long transaction running account change number accounts large compared number threads problem decide live number accounts low lets hundred peter single endlessly running thread account transaction queue efficient threads fight shared queue solution implement form work stealing means thread blocked work implement check thread lock account href http docs oracle javase docs api util concurrent locks reentrantlock html trylock rel nofollow directly access transaction queue thread guess implement transaction handling href http docs oracle javase docs api util concurrent linkedblockingqueue html rel nofollow thread poll transactions queue loop acquire lock respective account fails add transaction thread specific list fetch transaction queue find transaction handle transaction finished list handle transactions pulling transaction global queue code roughly problems address ul li thread hangs check transactions list periods time empty end processing transactions stuck lists handled li li significant amount locks held threads remaining threads lot transactions handle fill local list draining global queue locks released transactions removed global queue creating imbalance work threads threads idling working long backlog transactions li ul simpler alternative transactions queue end acquire lock make executed arbitrary order happen solution extremely em edit em solution attach queue account thread specific lists thread add transaction queue respective account finds account blocked thread finishes transaction account queue account transactions added global list 