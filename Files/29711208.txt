efficient list type parallelstream 
process list type linkedlist arraylist ect initial list gain speed multithreading em additional information em expected element count ranges size individual element big chars hr alternativly place amount strings guaranteed change em results em elements em toprocess em hr iterate elements order end moment loop assemble final result easily changed regular loop 

number output elements equals number input elements youre satisfied array result collector pipeline fixed size destination array preallocated size parallel operations deposit results directly destination array locations copying reallocation merging wrap result add remove elements result strong collectors strong conditions doesnt hold deal collectors tradeoffs collectors work parallel operating intermediate results thread confined manner intermediate results merged final result operations accumulation individual elements intermediate results merging combining intermediate results final result faster benchmark default change future release strong linkedlist strong element accumulated involves allocating list node hooking end list hooking node list fast involves allocation single stream element incur minor garbage collections accumulation proceeds merging expensive step convert source list array looping node list storing element temporary array code iterates temporary array adds element end destination list incurs allocation node element noted merge operation expensive iterates element source list em em incurs allocation element introduces garbage collection overhead strong arraylist strong accumulation element involves appending end array contained fast array full reallocated copied larger array growth policy allocate array larger current reallocations occur proportional log number elements added isnt bad elements copied means earlier elements copied multiple times merging cheaper converting array involves bulk copy time elements source temporary array destination array resized case requiring bulk copy elements source elements bulk copied temporary array destination pre sized accomodate strong discussion strong faster collection requires unnecessary reallocation copying elements times potential future optimization accumulate elements data structure optimized fast append access preferably pre sized accommodate expected number elements data structure supports fast merging possibility iterate final result shouldnt difficult roll data structure properties significant simplification doesnt full blown list accumulate pre sized lists avoid reallocations merging simply gather tree structure list lists jdks href http hg openjdk net jdk8 jdk8 jdk file jdk8 b132 src share classes util stream spinedbuffer rel nofollow spinedbuffer private implementation class ideas 