lambda translation generation static method 
lambda translation step process strong strong desugaring lambda static method class blockquote strong private static void main lambda main strong public static void main main lang string blockquote strong strong generation class implements functional interface blockquote class generated class main lambda implements functional interface interface lang runnable blockquote strong question strong strong static method strong lambda body put directly interface method 

addition correct answers current scheme efficient reducing capture linkage costs lambdas reducing code duplication reasons idea simply doesnt make sense ul li bytecode place lambda proxy class generated runtime compile time stuff bytecode proxy class wed put capturing class file em copy em proxy class lives capturing class li li access control lambda body calls private method desugaring capturing class automatically acquires access control context capturing class logically part put bytecode proxy class wed additional magic give access control context li ul 