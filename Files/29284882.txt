switch guava charmatcher regex 
charmatcher algorithm parse mentions twitter status file million tweets appears eating great deal memory running netbeans profiler appears create lot char arrays assume charmatcher solution implemented recommend efficient charmatcher strings method regex solution assume efficient terms object creation speed primary concern expected input usernames extract username considered legal beginning number number character beginning illegal characters immediately disregard expect extract usernames legal usernames illegal characters input blockquote mike nancy size blockquote return blockquote mike nancy blockquote answer valid 

explanation blockquote expected input usernames extract username legal character beginning illegal characters immediately disregard expect extract usernames legal usernames illegal characters blockquote searching shorthand immediately preceded simply regex main worry eliminate backtracking cost matches pattern breaking pattern ul li positive lookbehind assertion check precedes match li li possessively matches character li ul declare strong globally strong thread reused method extract unique usernames reuse href https docs oracle javase docs api util regex matcher html reset lang charsequence rel nofollow strong strong threadsafe matcher instances boost performance multiple threads global testing input yields hr side looping index bad idea idea type returns access index whilst loop loop index easily massive performance penalty absolutely reason strong tl dr strong index loop ol li li li index reason li ol hr addendum code wrap simple method return match results method inspiration href http stackoverflow answer 