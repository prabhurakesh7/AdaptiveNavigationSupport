bitwise operator divide simulation division 
bitwise operators divide numbers chance divide number bits manipulation strong edit strong rephrase question divide number break machine strong edit strong lets forget moment feasible machine divide number programming language strong edit strong practically impossible simulate small number approaches strong edit strong people mentioned cpu hardware prevents division agree wont direct lets code lets assume cap maximum case compiler error cpu resist machine find number multiplied result happen die achieve directly manipulating bits strong final edit strong perform binary division bitwise operators purely contradicts title strong strong simulating divison posted answer faster 

division method faster strong href http en wikipedia org wiki division algorithm division repeated subtraction rel nofollow division repeated subtraction strong posted run indefinitely divide implement version strong href http en wikipedia org wiki division algorithm goldschmidt division rel nofollow goldschmidt division strong throw error divisor algorithm works scale dividend divisor starting satisfied case divide step choose arbitrary precision result good code check faster division repeated subtraction method converges result quadratically linearly dividing matter methods wont converge divide small number difference strong dont code run indefinitely strong return dividing modify stop reaches starting values result iterations worst case multiply times greater href http docs oracle javase docs api lang double html max rel nofollow goldschmidt division implemented amd athlon cpus read lower level details check article href http www acsel lab arithmetic arith14 papers arith14 oberman pdf rel nofollow floating point division square root algorithms implementation amd k7 tm microprocessor strong edit strong addressing comments code restoring division method posted iterates times lowered code compare methods number iterations ran implementations times worst case goldschmidt measured running time running time 290ms goldschmidt division 23000ms seconds code implementation strong 80x faster strong test expected case multiplications working advantage implementation make result large supports result limited practice dividing goldschmidt division doubling dividend equivalent shift left iteration reaches maximum equivalent function overflow depending memory allocated result exception compromise made ul li division simulation run fast result upper bound li ul ul li result big memory time limit li ul strong edit strong addressing comments blockquote division happening updated code find biggest biginteger blockquote show goldschmidt division degenerates shift left factor equal condition true eliminate redundancies assuming multiplication shift left maximum reach loop times equivalent subtract prevent overflow showing goldschmidt division equivalent shift left blockquote shifting bits left pad bits running small dividend left shift check results thing blockquote weve shift left equivalent multiplication lets version works examples show memory dividend power power close repeatedly doubling 