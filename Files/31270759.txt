approach handling exceptions functional 
exceptions checked severely interrupt flow program logic fp idiom arbitrary code breaks exception unparseable string replace default fails handles hr strong strong answered question 

presented full code class large api pure extension api drop replacement existing code mdash isnt subtype final class class relationship href http mauricio github io scala word html monad monad draws inspiration adapted idiom throwing exceptions terminal operations key guidelines class ul li opposed monadic approach doesnt ignore javas exception mechanism li li relieves impedance mismatch exceptions higher order functions li li exception handling statically typesafe due sneaky throwing runtime swallows exception explicit request li ul class cover typical ways handle exception ul li handling code substitute li li analogous return instance unwrapped state current instance suitably updated li li exception throwing expression making call declare exception type li li wrapping exception em translate em li li resulting empty li li special case handling empty handler block li ul approach selectively pick checked exceptions expose code exceptions remain unhandled time terminal operation called em sneakily em thrown declaration considered advanced dangerous approach employed alleviate nuisance checked exceptions combination lambda shapes declare class hopes offer cleaner selective alternative sneaky throw hr hr hr 