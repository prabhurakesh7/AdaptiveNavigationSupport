avoid cache misses 
switching state mind develop applications cache friendly br stack allocation holding data purpose array data driven programming br developer question br heard cache miss generator br heap scattered ram allocation garbage collector work problem br sense write data driven br optimize code stuck automatic optimization cache misses 

blockquote stack allocation holding data purpose array data driven programming blockquote automatically place short live obejcts stack escape analysis wouldnt worry profiler issue profiler preventing escape analysis working problem real program blockquote heard cache miss generator blockquote referencing code written structs objects embedded inside objects difference makes depends sensitive application micro tuning blockquote heap scattered ram allocation garbage collector work problem blockquote random memory arranger theory objects practice create generally allocates memory eden space continuous memory simplest efficient allocate memory means time immediately possibly cache line fact false sharing real problem cases objects cache line gc openjdk oracle jvm objects copied reverse order discovery immediately cases blockquote sense write data driven blockquote case case lt cases make big difference code applications bigger problems worry blockquote optimize code stuck automatic optimization cache misses blockquote control memory structures choice chronicle software libraries love services cases good reason worry sort micro tuning extreme cases make real difference blockquote dont modify garbage collector copies messes bit structure avoid blockquote gc packs related objects efficiency copying objects manner found simplest implementation arranging data randomly deliberately wanted work avoid false sharing trivial 