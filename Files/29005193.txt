pattern package structure justify existence default visibility modifier 
understand packages structured opinion based rule default package visibility implies specific reason pattern thought creation packages structured object oriented environment object oriented principles car starting methods default visibility glance methods semantically supposed initially declared default case point entry public call method start car dont expose method publicly things internal purposes calling remote control device car method default visibility package restricted inaccessible method case options ul li turn method public rely duck typing li li change package engine class li ul understand practice real life project packages role design project default visibility practically useless semantically language failure design pattern handle project structure solves semantics problem pattern exist documented provide real life examples object oriented code 

strong item minimize accessibility classes members strong joshua blochs book em effective em items title accessibility classes methods stricter possibile youre creating api default package visibility classes methods dont external components specific pattern good design process design problem classes tightly coupled package stated simply unite single class violate href http en wikipedia org wiki single responsibility principle rel nofollow single responsibility principle revise case operation user define public methods imho possibilities ol li href http stackoverflow questions pros cons package private classes li li classes li li unchanged diagram classes give api user em javadoc em public classes li ol respect point suggest loot page href http docs oracle javase tutorial javaoo nested html rel nofollow nested classes reported article compelling reasons nested classes include ul li strong logically grouping classes place strong class class logical embed class nesting helper classes makes package streamlined li li strong increases encapsulation strong top level classes access members declared private hiding class class members declared private access addition hidden world li li strong lead readable maintainable code strong nesting small classes top level classes places code closer li ul solution solve problem missing possibility nest scopes scala js 