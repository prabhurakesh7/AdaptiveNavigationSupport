hibernate transaction manager performance issue 
encountering performance issue hibernate executing sql statement select table takes 90ms fetch records columns hibernate run code dao class takes ms complete executing statement strong strong mention additional execution time service class calling dao totally ms spent doubt time spent transaction management code configuration wrong approach doesnt ol li add connection pool datasource setting li li hibernate native sql method createcriteria dao class li li enable lazy load li li increase heap size tomcat server li li level cache provider li li transactional readonly true read query li ol workarounds speeding operation ol li enable hibernate cache configuring ehcacheregionfactory enable level cache start server web application initialize cache manually trigger service call successfully reduce data binding process class fetching sql query hibernate 400ms 3ms bottleneck point committing transaction strong update strong li ol configuration code strong hibernate configuration strong strong getall method dao class strong strong service class calling dao strong suggestion configuration code improve performance welcomed strong update strong enable hibernate statistics deduce time spent executing statement due statistics turns execution time times executing controller class calling service calls dao executing statement hibernate strong update strong add millisecond timestamp track process spent time found time spent exposing hibernate transaction jdbc transaction commiting transaction service operation statistical finding log listed initializing caching suggest improve situation 

finally solve problem configuration solution edited post caching initialization refactor code proceed dao operations transaction service method transaction service simplified method call transaction services methods workflow registration user costly boosts performance post update bottleneck transaction commit database server problem change db localhost speed boosted 20ms 500ms 