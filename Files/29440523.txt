asm catch block output 
make custom compiler expression leaving stack type checker backend support problem asms code instrumentation compiling code class loading dont asm problem computing stack frames blocks output problem instrumentation code needed correctly implemented 

asm calculate stackmap frames correct code stackmap fix broken code learn wrong analyze exception pre class lang prettyprint override branch targeting byte code position pre class lang prettyprint override source branch instruction position pre class lang prettyprint override explaining thing matching frames don necessarily wrong stackmap calculation bytecode violates constraints calculated stackmap reflects pre class lang prettyprint override source branch location instruction stack pre class lang prettyprint override target branch em em values stack pre class lang prettyprint override bytecode isn disassembled exception message point manual disassembling bytecode yields pre class lang prettyprint override pre class lang prettyprint override ways reaching location ordinary execution exception handler starting performing deduce stack pops exception pushes constant information don signature invoked method verifier didn reject assume stack holds values branch produces values method signature implies instruction branch reading comment error apparent instruction reads end method invoke exception occurred stack flushed stack exception handler recover join code path place required invoking important understand exception handlers em em start operand stack consisting single element exception values pushed exception occurred persist prefetch field guarded code exception occurred store local variable retrieve asm derived stackmap frame location state branch joining frame state branch cared types depth pity error easy spot missing feature error checking bug 