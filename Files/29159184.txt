interrupt resttemplate call thread interrupted 
make library synchronous asynchronous feature ul li waits result returns result li li returns future immediately processed things needed li ul strong core logic library strong customer library call passing builder object construct url object make http client call url executing response back json string send json string back customer creating object customer call call provide method separately library interface implements interface simple class perform actual task started working solution terminating tasks timed reporting timeout client task continues run thread pool potentially occupying limited threads long time research online found cancel tasks timed cancel future shown shown solution close resources thread interrupted interrupt calls calling cancel future task timed guess thread doesnt interrupted terminating tasks timed dont impact affect performance solution deal case current setup 

interrupt thread thread performs blocking operations socket cancelling task timeouts set timeouts http connection timeousts set connection factory resttemplate request resttemplate create resttemplate task reuse previusly created templates threadlocal resource pooling task thread local btw spring asyncresttemplate make code simpler netty4clienthttprequestfactory nio based client connections case interrupt tasks makes http connection short sample nio care request cancelled timeout 