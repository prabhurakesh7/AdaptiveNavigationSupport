writing code null 
objects default initialized recently answer research handling npe properly href http programmers stackexchange http programmers stackexchange primary post blockquote set variable null unexpected null dont null parameters blockquote wondering handle android crash reports developer dashboard npe noticed code checking continue operation combing codebase remove default instantiation running areas em appears em impossible fix errors arise variables google maps api declare object set declare variable member initialize call occasionally field unable reproduce error environment led reading handling npe popular question href http stackoverflow questions avoiding null statements avoiding null statements top accepted answer recommends strategies resolving issue ol li statement surface unit testing debug code ignores default li li null object pattern appealing solutions presented ends feeling cleaner working external libraries option extending external library messy li li catch difficult pervasive code end densely peppered catch null end swaths code blocked catching errors wont precision handling aftermath li ol question option coding paradigm kind built fix optimally solution dont crash lose data reliability lose application functionality strong strong question problems code question defensively write code prevent unexpected npe language default initialization 

null avoided declared reference assigned successfully compiled considered null good reason trash values heap track assignments returns null memory locations trash values application assigned heap block prevents values things integers thinking belong left application happened address app started strategies listed catch dealing npes assert generally avoided results halt statement condition isnt met words graceful exit null statement achieves goal assert option respond condition halt program catch powerful cases run race conditions making calls asynchronous libraries libraries heavily network dependent operations googlemaps methods fetch updated information based location view frame cases make call object managed library mid refresh make assumption race condition easily reproduce npe finally dont avoid null check captures respond conditions catch inappropriate costs boolean operations operations billion back back order performance degradation worth headache eliminate 