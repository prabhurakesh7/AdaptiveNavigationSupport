integration test layer good practice 
application spring mvc basically presentation layer controllers service layer business units helpers integration layer data access layer jdbc jpa repositories ensure testing future addition code wont break previously working unit testing mockito integration testing spring test spring test mvc unit testing made class component basically good coverage incoming inputs flows components action working fine doubts unit test ensure units works expected integration test story debatable scenarios design unit testing entire system real platform doubts practices ol li controller service data layer approach made layer userservice class userservicetest unit test userserviceit maintainability ideal feel repeat test scenario real system practice make sense scenarios makes sense test coverage class unit testing ensure real component start make sense scenarios good criteria decide li li approach important test cases integration test controller layer means invoke rest services verify json output dont verify things layers calling real rest api underneath layers controller service dao consideration li li helper class dont make sense unit method purpose unit testing li li classes data layer criteria api querydsl make unit testing cases extremely difficult valid justification li ol tips practices makes task ensure system integrity real valuable process keeping mind maintainability stuff 

kindda touch entire test strategy needed application testing coverage layers blockquote ensure testing future addition code wont break previously working unit testing mockito integration testing spring test spring test mvc blockquote support href https en wikipedia org wiki regression testing rel nofollow regression testing type detailed test pyramid href http stack imgur cyt8k png rel nofollow img src http stack imgur cyt8k png alt test pyramid easy integration tests good portion recommended integration cross layer cross componentapis natural business components live layer assure working expected href http martinfowler articles microservices html rel nofollow msoa push support extensive interfaces integration testing agree blockquote integration test story debatable blockquote experts suggest unit tests gui href https www techopedia definition end end test rel nofollow e2e imho strict practices good happy trade offs suits case blockquote feel repeat test scenario real system practice make sense scenarios makes sense test coverage class unit testing ensure real component start make sense scenarios good criteria decide blockquote draw line scenarios keeping long story short unit testing href https en wikipedia org wiki mock object rel nofollow mock objects naturally component tests require real system behavior check handling data passed units subsystem components component service db messaging unit level task blockquote controller layer means invoke rest services verify json output dont verify things layers calling real rest api underneath layers controller service dao blockquote true testing presentation layer exercise underlying layers bother rest testing approach selenium team suggests href http www seleniumhq org docs test design considerations jsp database validation rel nofollow db validation approach youre talking href https en wikipedia org wiki javabeans rel nofollow beans href http www javaworld article web development foundations jsp design patterns view helper pattern html rel nofollow viewhelpers blockquote helper class dont make sense unit method purpose unit testing blockquote youll unit reasons valid components href https en wikipedia org wiki single responsibility principle rel nofollow single responsibility doesnt deny testing blockquote make unit testing cases extremely difficult valid justification blockquote encapsulated private static classes methods properties testing href http lstierneyltd blog development unit test private methods reflection rel nofollow reflection special case unit testing legacy code api change needed code lack testability points design smell 