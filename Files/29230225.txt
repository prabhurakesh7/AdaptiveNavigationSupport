akka system qa perspective 
testing akka based application month reflect conclusions ol li akka actors achieve lot concurrency reached messages sec fine message passing li li netty layer connections end end akka actors eventually db calls rest calls writing files system doesnt make sense anymore actors mailbox full throughput ability receive msgs sec slow li li qa perspective huge pipe forcefully pump lot water handle input hose bad endpoints handle pressure huge pipe li ol answers suggest verify system ol li blocking calls db calls rest calls handled actors good message passing li li lets connecting persistently millions android ios devices akka system sockets unreliable remote actor implemented persistent connection li li sort computation actors db calls li ol request post editors separately 

operation separate worker actor fork join pool combination href http stackoverflow questions blocking calls akka actors blocking code prevent thread starvation target system db rest supports concurrent connections akkas routers creating actor connection pool produce actors tables resources queues depending transaction isolation storages consistency requirements handle asynchronous requests acknowledges blocking put blocking operation inside separate future thread worker send acknowledge message operations end actor implemented persistence connection actor holds connections state actors stateful reliable href http doc akka io docs akka snapshot scala persistence html rel nofollow akka persistence save connection storage blocking computations inside actors method akka failures connection db managing automatically akka supervising blocking code huge pipe backend application pipe huge akka improve performance environement handle pumps world akka water tank means outer pressure stronger btw means developer careful mailboxes water outofmemory prevent organize href http blog abhinav ca blog akka backpressure rel nofollow back pressure acknowledging incoming message simply blocking endpoints handler til proceeded akka 