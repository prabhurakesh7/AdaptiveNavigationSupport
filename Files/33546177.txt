rmi ssl performance frequency ssl handshakes 
setting solution connect applications rmi spring components put servers communicating remotely application jvm part extracted put server communicate original application remotely main requirements communication fast br remote communication minimum extra coding adding additional layer transform request xml json communicate webservices br communication secured ssl sides rmi ideal solution comply requirements pretty fast href http daniel gredler net remoting protocol benchmarks rel nofollow http daniel gredler net remoting protocol benchmarks pretty easy set spring configure ssl sslrmiserversocketfactory sslrmiserverclientfactory spring rmiserviceexporter tight coupling issue case components internal minimal chance future reuse strong doubts performance overhead rmi ssl strong original mentioned benchmark tested communication ssl find rmi ssl works perform full ssl handshake remote method call big performance overhead solution comply requirement question strong rmi ssl full ssl handshake method call default strong br ways optimize communication ssl session reuse br completely solution achieve optimal speed ssl minimal extra coding spring httpinvoker mind fast rmi default configuration withou ssl benchmark experience find link docs explaining exact behavior ssl optimization configuration 

blockquote rmi ssl full ssl handshake method call default blockquote ul li connection pooling client connections reused li li default handshake connection li li connections resume existing ssl sessions abbreviated ssl handshake li ul refer sun oracle implementation rmi 