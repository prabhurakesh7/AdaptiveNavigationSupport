mvp event bus pattern listener 
question paradigm dont event bus listeners mvp environment typically part dependency injection view model references advantage showing explicit contract view model presenter readable wouldnt cleaner approach presenter listen events views events carry view payload json representation case presenter talking back view view listen events presenter major advantage dont write interfaces contract view presenter href https github ondrej kvasnovsky vaadin model view presenter blob master src main presenter login loginpresenter l21 rel nofollow code presenter exposed view details text fields increasing coupling view presenter replacing front end javafx vaadin alter presenter class live project types events strong dont strong create event class cases loginviewevent dashboardevent maintenance pain simple view send event presenter layer handles event found decouple views presenter strong advantage strong ul li boiler plate code views dont interfaces li li event means adding event element enum updating respective subscribe methods handling event li ul strong disadvantage strong ul li memory leak forget unregister eventbus faced plenty time li ul strong questions strong approach means larger set enum elements application grow approach anti pattern event bus extensively drawbacks bus system interface listener pattern wanted valuable suggestion regard main issue blindly apply pattern extensively project shouldnt regret pitfall approach 

blockquote approach means larger set enum elements application grow approach anti pattern blockquote events event identifiers simple mechanism demonstrated simple works small applications proven times multiple frameworks microsofts projects event interceptors implemented elegant handling events previous time project utilizing framework blockquote event bus extensively drawbacks bus system interface listener pattern blockquote basically thing package world de facto standard listener interfaces event bus approach facebooks javascript based framework interesting notice similarity model view presenter flux design patterns unidirectional data flow highlighted architectures mentioned case replacing ui framework opinion changing ui framework reuse portions rarely pay price added abstraction layers complexity upfront framework change start kiss yagni principles change ui framework implement ui layer scratch 