loop 4x faster iteration outer loop 
reproduce processor cache effects href http igoro archive gallery processor cache effects understand managed environment examples translate strange case distill simple illustrates effect output iteration loop times fast subsequent iterations opposite expect performace jit kicks warm loops micro benchmark curious causing behaviour loop performed 24ms satisfying steady state time 100ms reference jdk linux strong update strong heres update info based comments experimenting moving system loop storing timing array size runs makes significant difference time output displayed run eclipse compile run command line jdk jvm modest significant results 2x 4x faster interesting usaully running eclipse slow things moving loop reused iteration effect changed iteration runs faster iterations slower speed strong update strong answer apangin explains suns jvm improvement 

suboptimal recompilation method jit compiler relies run time statistics gathered interpretation method compiled time outer loop completed iteration run time statistics tells code loop executed jit bother compiling generates uncommon trap loop ends time uncommon trap hit causing method deoptimized iteration outer loop method recompiled knowledge jit statistics context compile reason cache register jit fooled wider context generates instruction update array memory effectively combination memory load store contrary compilation jit caches register instruction store memory load fast loop iteration slow loop recompilation problem fixed jdk checked test recent jdk early access release verified works expected 