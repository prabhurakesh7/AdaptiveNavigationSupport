properly executor 
executors multi threading apps figure ways specifically skip donesignal itll whats donesignal add donesignal id approaches interchangeable situation supposed specific type 

ol li strong em executorservice em strong simple easy dont worry unbounded queue tasks complete shorter time intervals completion task wait task complete hides low level details prefer number tasks small number piling tasks unbounded queue pile memory amp degrade performance system constraints due pile pending tasks prefer capacity constraints amp handle rejection tasks li li strong em countdownlatch strong em initialized countdownlatch count count decremented calls method assuming calling decrement runnable task threads waiting count reach call methods calling blocks thread count reaches strong em class enables thread wait set threads completes tasks em strong strong cases strong ol li achieving maximum parallelism start number threads time achieve maximum parallelism li li wait threads completes start execution li li deadlock detection li ol href http howtodoinjava countdownlatch concurrency tutorial rel nofollow article lokesh gupta details li li strong em threadpoolexecutor em strong control application constrained number pending runnable callable tasks bounded queue setting max capacity queue reaches maximum capacity define rejectionhandler types href http docs oracle javase docs api util concurrent threadpoolexecutor html rel nofollow policies ol li default handler throws runtime rejectedexecutionexception rejection li li thread invokes execute runs task simple feedback control mechanism slow rate tasks submitted li li task executed simply dropped li li executor shut task head work queue dropped execution retried fail causing repeated li ol href http letslearnjavaj2ee blogspot threadpoolexecutor handler policies html rel nofollow article details simulate countdownlatch behaviour call strong invokeall strong method li li mechanism quote href http tutorials jenkov util concurrent fork join forkjoinpool html rel nofollow strong forkjoinpool strong added similar difference makes easy tasks split work smaller tasks submitted task stealing free worker threads steal tasks busy worker thread queue introduced api href https docs oracle javase docs api util concurrent executorservice html rel nofollow executorservice create work stealing pool dont create blockquote creates work stealing thread pool processors target parallelism level blockquote default number cpu cores parameter parallelism core cpus threads process work task queue mechanism complimentary depending level granularity control chose li ol 