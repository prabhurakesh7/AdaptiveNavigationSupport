swing edt threads waiting execution eventdisplay swingutilities invokeandwait 
pretty complex problem current project gui written computing engine written displays access data issues concurrency long story code rewrite occasionnaly engine modify datas acquire mutex pretty clean side problem gui swing access data control eventdispatchthread thread acquire mutex jni unitary access kernel good performance data consistancy refactor encapsulate lock code nativemutex call native functions lock unlock jni write reentrantnativelock avoid rewrite add high level lock reentrantnativelock deal eventdisplaythread defined lock implementation avoid edt takes mutex throwing exception lock method called edt return lock owned thread deal swingutilities invokeandwait rewrite dirty code application conceptually focus synchronization engine gui side threads waiting edt threads called invokeandwait implement safer check owner thread waiting edt avoid ununderstandable probable bugs annoy futur coworker strong threads waiting edt threads called invokeandwait strong em context open listen ideas solve problem doesnt imply lot rewrite em comments make context isnt post code hope explicit problem basic decorator reentrant nativelock 

records events dispatch created waiting event dispatched case invokes push queue implementation queue ul li override check waiting notified case track event li li override unmark calling thread waiting edt li ul complete watch strong sleeps edt make collisions happen application strong 