call stack inspection manipulation 
strong question strong analyze modify call stack content frames stack content runtime possibility low level unsafe internal api possibility write extension constraint usable standard runtime debugging profiling mode point research good idea id gather local data frame store remove frame stack possibility restoring effectively continuations jvm fast async frameworks gevents python generator constructs python repeated question found questions answered debugging tools href http stackoverflow questions set call stack similiar question mine answered context guy wanted work async computations general stack oriented answer href http stackoverflow questions jvm manipulate frame stack question similiar focused parallelization answers focused repeat research step process coming language feature proposal dont wanna risk corrupting jvm possibility gonna analyse risks manipulating stack hand ugly creating instances ommiting consrtuctor basis objenesis dirty hacks dirty introducing cool ps href http docs paralleluniverse quasar quasar href http lightwolf sourceforge net index html lightwolf exist concurrency focused frameworks strong edit strong clarification compatible future jvm libraries versions preferably talking considered stable public api solution lies internal standard standard internal sun misc unsafe doable extension jvm api doable bytecode manipulation asm 

achieving jvmti directly stated comment instrument redefine methods entire classes run time define method call method directly restore execution context stack redefine original code lets restore stack called called loaded change code directly call loaded redefine directly call call topmost method called fast redefine original code multiple threads involved parameter values restored complicated doable jvmti worth question hope helps feel free contact comment clarification edit doable lot work restore parameters local variables calling contexts pointers held locks edit requested assume stack calling calling arbitrary code inside redfine void void void redefine reach redefine method redefine classes original code stack 