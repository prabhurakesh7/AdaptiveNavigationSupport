writing bussines logic catch block 
understand catch blocks write bussines logic suppress error question part related href http stackoverflow questions exception handling business logic check strong understand strong strong unchecked strong exception write code avoid code strong question strong strong checked strong exception work database wich throws exception nosuchelement searching element found write code listed pattern 

catch blocks regular control flow point avoiding dont catch error places handle input error place manually signalling errors replacing result error prone hooray easily lose meaning manually adding control flow propagate replacement short path back caller great free exception rule thumb code cleaner golden rule exceptions href http programmers stackexchange questions exceptions throw early catch late catch late general handle late place business logic cases means replacing checked exception unchecked propagate predefined interfaces dont adding clauses problematic version superficially avoiding catch block adds unneeded code amp code branches cleaner case business logic replace input errors silently ignore time immediately returning control amp information happened back caller catching er catching replacing exception regular api exception whats depends question tells overuse exceptions apis find clean api abstraction signals error exceptions exceptions place throwing exception handle conceptually architecture layers exceptions api arent great cases leads bunch throws clauses adding dependencies details href https en wikipedia org wiki dependency inversion principle rel nofollow https en wikipedia org wiki dependency inversion principle code knowledge implementation details code unchecked exceptions thrown exceptions reasonable perimeter absolutely fine make life easier rules capabilities plain typical case shouldnt handle error fake database objects easily lead code assumes proper entry assuming case avoid exceptions roughly handle case clean abstraction return case exception continue case continuing fake object 