javafx write writeobject readobject object 
object code implements interface javafx properties failed properly ultimate goal strong write strong strong read strong object read links href http stackoverflow questions notserializableexception simplelistproperty notserializableexception simplelistproperty href http www oracle technetwork articles javaserial html rel nofollow oracle doc href http stackoverflow questions custom serialization custom serialization class running pick closing price google finance call ensure method called object deserialized thread restart understand define private methods class strong question strong read 3rd link confused private methods trade object lot properties construct object set rest properties strong update strong updated code argument constructor serialize deserialize case precise create object time object serialized read object deserialize strong creationtime 1443444301488 strong dont achieve problem facing 

avoid serializing javafx objects create javabean object state serialized trade object build serialized proxy javabean similar effective book book proxies security purposes rule follow serialize simple javabean objects avoid serializing complicated objects regular serialization run version problems class implementation ways json gson serialization pure standard external libs jars accomplish hashmap serialize hashmap real objects build hashmap passed avoid constant serial version mismatch exception sticking pure standard vanilla edit object serialization proxy pattern apporach effective 2nd edition item approach baked object serialization protocol method utilizes proxy interface methods interface return hash extensive encrypting serialized objects hashes prevent tampering saved files necessarily recommending showing possibilities serialization proxies object edit2 deeper explanation method understand basics serialization heavy lifting writeobject readobject work fine cases good news deciding fields proxy things serialize state worry serialization adding removing objects stream initialize main class proxy vice versa create constructor main class takes proxy object input constructor initialize main class proxy object lastly ability proxy writing reading writereplace readresource methods writereplace main class return instance proxy essentially telling serialize object flip side proxy youll readresolve return instance main object deserialization lets steps bullet list decide fields saving create proxy class nested class fields br create constructors main proxy class br implement writereplace readresolve main proxy classes hope helps 