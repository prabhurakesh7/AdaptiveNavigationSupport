efficient pass unsigned char byte 
native function signature pass method copying data allocating approach doesnt avoid copy approach pass pointer starting address length avoid copy advance strong edit strong wont modify data layer read access strong edit strong blockquote dequeueinputbuffer pass buffer native code memcpy data mediacodec buffers direct bytebuffers address length jni functions call dequeueinputbuffer buffers returned mediacodec copy unavoidable encoded data output side surface multiple reasons blockquote current code received native layer time memory allocation time requiring copy current implementation suggested approach require copy current implementation efficient suggested sending address reference ing layer strong edit strong copying array copy layer implement idea 

question slightly complicated fastest make data visible language code pre allocate direct bytebuffer receive data data immediately accessible native managed code accessible means language code individual bytes em quickly em allocate direct bytebuffer jni href http docs oracle javase docs technotes guides jni spec functions html direct byte buffer rel nofollow pass arbitrary buffer means backing storage allocate managed code href http developer android reference nio bytebuffer html allocatedirect int rel nofollow recent versions android give direct buffer lives managed heap means accessible href http developer android reference nio bytebuffer html array rel nofollow code written access call method access data arriving buffers dont control video decoder output dont choice copy data managed pay byte overhead side theory jit recognize youre optimize dont avoid allocating buffers pre allocation pooling performance 