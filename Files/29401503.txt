unit testing private methods akka 
akka akka id understand unit testing business logic actors read href http doc akka io docs akka snapshot testing html rel nofollow documentation isolated business logic actor simple implies method test public actors communicate messages understanding reason public methods id made method private test method ol li make package private li li test actors public interface actor received correct parsed message actor li ol questions ol li downsides option assuming actors communicating messages encapsulation clean open interfaces important li li case option catch messages actor test downstream testing catching reviewed examples catching messages responses back sender show intercept message send actor li li option missing li ol strong upd strong forgot mention considered options ul li moving logic actors completely helper classes common practice akka li li powermock avoid redesign li ul 

good reason make method private generally makes method class private prevent direct reference instance class calling method actor instance direct reference instance actor class communicate instance actor class light weight proxy communicate sending messages handled mailbox expose internal state methods actor class sort big selling points actor system actor instance completely encapsulates internal state methods protecting world internal things change response receiving messages mark method private strong edit strong unit testing actor imo functionality internal methods called handling focus testing methods isolation make paths lead invocation properly exercised messages pass test scenarios producing message child actor knowing works expected means asserting received correct message order creation child overridden test code replace actor creation probe make received expected message testing functionality comment moving real business actor separate testable class calling actor people unheard personally dont approach works dont major issues 