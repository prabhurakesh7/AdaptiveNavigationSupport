xrs reduce performance 
ibm blockquote strong xrs strong disables signal handling jvm strong xrs strong setting xrs prevents run time environment handling internally externally generated signals sigsegv sigabrt signals raised handled default operating system handlers strong disabling signal handling jvm reduces performance approximately depending application strong strong xrs sync strong unix systems option disables signal handling jvm sigsegv sigfpe sigbus sigill sigtrap andsigabrt signals jvm handles sigquit sigterm signals xrs strong xrs sync reduces performance approximately depending application strong strong strong setting option prevents dumps generated jvm signals sigsegv sigabrt jvm longer intercepting signals blockquote href https www ibm support knowledgecenter ssyke2 ibm aix doc diag appendixes cmdline xrs html rel nofollow https www ibm support knowledgecenter ssyke2 ibm aix doc diag appendixes cmdline xrs html understanding prevent dumps generated os signals intercepted jvm longer intercepting handling signals stand reason em increase em performance em decrease em claimed ibm reduce performance 

href http blog ragozin info safepoints hotspot jvm html rel nofollow strong safepoints strong vm operations optimizations jit manage signals jvm occasionally perform operations require pause execution globally stop world large scale garbage collection hot reloading internally recompiling classes order make running threads hit barrier pause time operation release threads technique hotspot jvms implement safepoints clever abuse segfaults sets memory page data thread periodically read page vm operation required read succeeds low overhead thread running jvm em em perform vm operation invalidates memory page href http fusionsecurity blogspot sigsegv strace html rel nofollow time thread hits safepoint segfault lets jvm regain control threads execution holds vm operation resets sentinel page restarts threads disable sigsegv handling jvm techniques synchronize safepoints efficient delegating processors built memory protection additionally jvm magic profiling essentially similar cpus branch predictor optimizations detects null check null elides check relies segfault expensive case rare catch null optimization requires custom handling sigsegv 