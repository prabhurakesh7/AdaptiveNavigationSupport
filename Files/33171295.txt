reliability random constant seed versions 
application random securerandom generate large sets information clients measurements realized faster memory intensive generate information seeds stored disk store read information looked javadoc didnt guaranteeing em constant em seed result versions strong question strong assumption make previous versions return previous versions sake fairness accept answers answering question dont answer question guarantee true versions question solicit opinions odds future version change algorithm generate pseudo random numbers random securerandom 

guaranteed versions dont similar guarantees href http docs oracle javase docs api util random html rel nofollow javadocs random blockquote instances random created seed sequence method calls made generate return identical sequences numbers strong order guarantee property algorithms class random implementations algorithms shown class random sake absolute portability code strong subclasses class random permitted algorithms long adhere general contracts methods blockquote emphasis mine thought concern decision underlying algorithms documentation class people theoretically provide differing implementation wouldnt compliance specification evidence implementation versions method defined exact version back looked clear guarantee values returned versions reliably calculate values algorithm find similar guarantees subclasses free break rule guaranteed consistent versions evidence find href http www coderanch security securerandom prng consistent rel nofollow forum post observing inconsistent values generated href http stackoverflow ian mclairds answer generating consistent values practice decide worth risk assume work behavior guaranteed answer part question theoretically change defined operation hard oracle works avoid breaking backwards compatibility id incredibly 