dynamodb scan query batchget 
dynamo db table structure consists hash range primary key items timestamp hash key attached random number times query fired give multiple hash values single rangekeycondition efficient terms cost time random number range 

understood correctly table definition primary keys thing mind calculate application order successfully retrieve items table makes sense random numbers part records evenly distributed dynamodb partitions application calculate numbers retrieve records mind lets create query needed requirements native aws dynamodb operations obtain items table ul li order entire primary key hash key range key case li li operation literally record table opinion unnecessary requirements li li lastly operation retrieve items table applying equality operator number operators dont entire match li ul operator options condition suitable requirements operator lets build query chosen sdk post information dynamodb primary keys href http stackoverflow questions dynamodb pk type dynamodb pk type strong em question concern querying multiple times random number attached combine queries hit dynamodb em strong concern completely understandable fetch records knowing entire primary key hash range records intend minimizing http roundtrips server solution sight documentation suggests avoid hot partitions uneven provisioned throughput blockquote strong design uniform data access items tables strong randomizing hash key writes table day spread evenly hash key values yield parallelism higher throughput read items day query keys application merge results avoid single hot hash key taking workload blockquote source href http docs aws amazon amazondynamodb latest developerguide guidelinesfortables html rel nofollow http docs aws amazon amazondynamodb latest developerguide guidelinesfortables html interesting point suggesting moderate reads single partition remove random number hash key records shot fall issue blockquote strong guidelines query scan avoid sudden bursts read activity strong burst capacity units scan problem scan consume capacity units partition scan requests read items partition means request hitting partition causing capacity units consumed throttling requests partition request read data spread multiple partitions operation throttled specific partition blockquote lastly working time series data helpful practices suggested documentation blockquote strong understand access patterns time series data strong table create throughput requirements dynamodb allocates reserves resources handle throughput requirements sustained low latency design application tables applications access pattern make efficient tables resources suppose design table track customer behavior site urls click design table hash range type primary key customer id hash attribute date time range attribute application customer data grows indefinitely time applications show uneven access pattern items table latest customer data relevant application access latest items frequently time passes items accessed eventually older items rarely accessed access pattern consideration designing table schema storing items single table multiple tables store items create tables store monthly weekly data table storing data latest month week data access rate high request higher throughput tables storing older data dial throughput save resources save resources storing hot items table higher throughput settings cold items table lower throughput settings remove items simply deleting tables optionally backup tables storage options amazon simple storage service amazon s3 deleting entire table significantly efficient removing items essentially doubles write throughput delete operations put operations blockquote source href http docs aws amazon amazondynamodb latest developerguide guidelinesfortables html rel nofollow http docs aws amazon amazondynamodb latest developerguide guidelinesfortables html 