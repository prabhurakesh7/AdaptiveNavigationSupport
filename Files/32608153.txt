long integer values 
class learned primitive data types ul li li li li li li li li ul data type bits wouldnt make sense exclusively data type avoid restrictions strong questions strong ul li downfall data type li li make sense data type data type li ul 

blockquote make sense data type data type blockquote strong absolutely strong hr h1 memory disk usage h1 variable wont difference performance apps grow increase app speed check href http stackoverflow questions efficient byte short int float inst question info href https docs oracle javase tutorial nutsandbolts datatypes html rel nofollow oracle primitive type documentation advices memory usage br blockquote byte data type strong bit signed twos complement integer strong minimum maximum inclusive strong byte data type saving memory large arrays memory savings matters strong blockquote br blockquote short data type strong bit signed twos complement integer strong minimum maximum inclusive byte guidelines apply strong short save memory large arrays situations memory savings matters strong blockquote br blockquote default int data type strong bit signed twos complement integer strong blockquote br blockquote long data type strong bit twos complement integer strong signed long minimum maximum strong data type range values wider provided int strong blockquote br blockquote float data type single precision strong bit ieee floating point strong range values scope discussion floating point types formats values section language specification recommendations byte short strong float double save memory large arrays floating point numbers data type precise values currency strong blockquote hr h1 code readability h1 clarify mind code lets variable represents id object object id decimals code id wont wont decimals full objects price makes job programmers read code easier 