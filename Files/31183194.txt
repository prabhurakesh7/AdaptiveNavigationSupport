false sharing issue variable modified thread marked volatile 
martin thompson article explanation false sharing href http mechanical sympathy blogspot uk false sharing html rel nofollow http mechanical sympathy blogspot uk false sharing html demonstrates slow experienced multiple threads invalidating cache line updating variable exclusively blockquote blockqfigure illustrates issue false sharing thread running core update variable thread core update variable hot variables reside cache line thread race ownership cache line update core ownership cache system invalidate cache line core core ownership performs update core told invalidate copy cache line ping pong back l3 cache greatly impacting performance issue exacerbated competing cores sockets additionally cross socket interconnect blockquote question variables updated volatile padding performance increase understanding volatile variable writes reads main memory id assume write read variable result flush current cores cache line understanding thread invalidates thread twos cacheline apparant thread read cache line reading volatile effectively renders cache dirty resulting read main memory wrong understanding 

blockquote variables updated volatile padding performance increase blockquote interesting read things ol li dealing array objects thread working li li object single field li ol access means threads invalidate cache line holds lock cache line update article states cache line typically bytes article adding padding object moves object threads locking em em cache lines threads crossing memory barriers assign cache line wont excessive l2 cache bandwidth summary performance increase threads locking cache line update field locks memory blocks clashing threads locks causing cache invalidations pretty cool 