paint swing 
big problem build program consist building swing interface squares button button function draw circle inside squares code dont continue frame class pane class problems questions ul li hit time button circle appears dissapears instantly square circle visible time li li hit time button appears circle square dont wanted make disappear circle square visible circle square case circle square make disappear circle square li li make circle beggining program blue circle position red circle inside remember circles clic button li ul 

thingies sense ol li firstly setting visible property visible added components make realize size li li avoid situations li li thirdly creating object explicitly avoid provided javas method default li ol strong edit comment strong strong graphical user interfaces strong require kind main application frame display strong swing strong instance step instantiate class make works expected programming strong swing strong gui creation code strong event dispatch thread edt strong info href https docs oracle javase tutorial uiswing concurrency rel nofollow concurrency swing prevent potential race conditions lead deadlock overrides href https docs oracle javase docs api javax swing jcomponent html getpreferredsize rel nofollow getpreferredsize returns desired width height panel case height class longer size frame pixels simply adds panel frame invokes pack method custom painting takes place method defined overridden subclasses provide custom behavior sole parameter href https docs oracle javase docs api awt graphics html rel nofollow awt graphics object exposes number methods drawing 2d shapes obtaining information applications graphics environment cases object received method instance href https docs oracle javase docs api awt graphics2d html rel nofollow awt graphics2d graphics subclass support sophisticated 2d graphics rendering standard swing components feel implemented separate ui delegate objects invocation super paintcomponent passes graphics context components ui delegate paints panels background custom painting efficient track strong coordinates strong variable case repaint areas screen changed recommended practice application running efficiently invocation method method defined mechanism programatically repaint surface component arg version repaints entire component multi arg version repaints area area clip invoking multi arg version repaint takes extra effort guarantees painting code waste cycles repainting areas screen changed manually setting clip method invokes method invocation tells swing repaint area component oval previously inherited behavior ui delegate fill area current background color invocation paints area component oval important point worth noting invoked row event handler strong swing strong smart information repaint sections screen single paint operation words strong swing strong repaint component row code appears refer topic href http docs oracle javase tutorial uiswing painting index html rel nofollow performing custom painting 