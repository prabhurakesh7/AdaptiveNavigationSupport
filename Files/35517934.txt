count calls recursive method causing stackoverflowerror vary program runs 
simple class demonstration purposes executed program times results results time setting max stack size results bit consistent equal time version strong edit strong jit disabled number makes sense jit optimizations affecting size stack frames work jit vary executions beneficial theory confirmed references documentation topic concrete examples work jit specific leads frame size 

observed variance caused strong background jit compilation strong process ol li method starts execution interpreter li li number invocations method scheduled compilation li li compiler thread works parallel application thread method continues execution interpreter li li compiler thread finishes compilation method entry point replaced call invoke compiled version method li ol basically race applcation thread jit compiler thread interpreter perform number calls compiled version method ready end mix interpreted compiled frames compiled frame layout differs interpreted compiled frames smaller dont store execution context stack method reference constant pool reference profiler data arguments expression variables futhermore race possibilities href http stackoverflow questions jvm decided jit compile method categorize method hot tiered compilation default jdk combination types frames interpreter c1 c2 hr strong lets fun experiments support theory strong ol li pure interpreted mode jit compilation br races stable results li li disable em background em compilation jit synchronized application thread br races number calls higher due compiled frames li li compile c1 em em execution unlike previous case interpreted frames stack number bit higher li li compile c2 em em execution produce optimized code smallest frame number calls highest default stack size 1m frame bytes long fact frame bytes jit inlined level recursion li li finally lets mixed stack trace order crash jvm stackoverflowerror option debug builds crash dump detailed stack trace find interpreted frames bottom c1 frames middle lastly c2 frames top li ol 