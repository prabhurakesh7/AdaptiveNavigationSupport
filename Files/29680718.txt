relinquish thread cpu async call completes akka 
akka equivalent pythons gevents monkey patch hr strong update strong confusion commets question restate question strong future wait future compete blocking thread returning caller future complete strong hr lets method blocks make asynchronous pass someblockingcall callback call returns result ready caller longer result result back caller passing message convert synchronous code asynchronous akka code redesign caller required id async code synchronous code pythons gevent write make synchronous code asynchronous redesign posible strong strong play framework href https www playframework documentation javaasync rel nofollow fake wont work general write code handles callback handler 

back sync design em efficient em good intention good idea href https www usenix org legacy events hotos03 tech full papers vonbehren vonbehren pdf rel nofollow href http docs paralleluniverse quasar transforming asynchronous callback fiber blocking operation rel nofollow quasar facilities strong obtain sync blocking apis highly efficient async apis strong href http blog paralleluniverse noasync rel nofollow blog post youre fundamental problem em em sync blocking style bad async sync dual styles transformed href http cseweb ucsd classes wi08 cse221 papers lauer78 pdf rel nofollow em blocking javas heavyweight threads efficient em strong abstraction problem implementation problem strong giving easier thread abstraction implementation inefficient agree future code efficient thread implementations roland hinted quasar adds lightweight threads strong fibers strong jvm performance async frameworks em giving thread abstraction em regular imperative control flow constructs sequence loops language strong unifies jvm jdks threads fibers common em strand em strong interface interoperate seamlessly porting unified concept strong top strands strong fibers regular threads quasar offers fully fledged strong erlang style actors strong strong blocking channels strong strong dataflow strong programming choose concurrent programming paradigm suits skills forced em bindings popular standard technologies em part href http docs paralleluniverse comsat rel nofollow comsat project em preserve code assets em porting effort minimal reason em opt easily em choose quasar binding strong strong strong clojure strong href http docs paralleluniverse pulsar rel nofollow pulsar project href http kotlinlang org rel nofollow jetbrains strong kotlin strong based jvm bytecode instrumentation quasar work jvm language integration module present offers tools build additional 