annotation equals object equals 
frameworks href https github google guice wiki bindingannotations binding annotations attributes rel nofollow guice require situations create strong implementing class annotation interface strong strong difference strong href http docs oracle javase docs api lang annotation annotation html equals lang object rel nofollow href http docs oracle javase docs api lang object html equals lang object rel nofollow definitions respected case applies href http docs oracle javase docs api lang annotation annotation html hashcode rel nofollow strong questions strong ul li designed reason difference li li side effects occur definition annotation classes li ul strong em update em strong br additional questions ul li href http docs oracle javase docs api lang annotation annotation html hashcode rel nofollow definition required implement em times hash code member computed string hashcode xor hash code em part li li method implemented consistent doesnt match exact definition times hash code member li ul 

definitions definition simply em specialized em annotation type definition basically decide implement class represent equivalence relation rules defines equivalence rules meaningful specifically instances fact equivalence work classes point classes meanings instances equivalence relationships programmer decide equivalence relation class contract equivalence relation side effects suppose type inherited equals mistake people classes maps dependent situations function object identity references equal references object instances considered create annotation instance equivalent previous values fields semantically representing sort behavior wouldnt items annotated annotation em instances em annotation hr question jeff bowman answered ill address make answer complete basically implementation annotations left compilers jls doesnt dictate exact implementation create implementing classes question mentions means annotation classes sources compilers supposed run files matter compiler created developer created implementations methods considered single class context interface context interfaces antithetic implementation define contracts create methods class object compare supposed class implementation method returns objects equivalent class implementation satisfies contract case interface required make equals hashcode work instances class instances classes implement interface means dont agree single implementation classes instances annotation element values hash codes break contract imagine annotation doesnt parameters imagine implement class returns hash code equal instances hash code good compiler return hash code check returned instance implementation objects type equal implement annotation interface follow definition return hash codes breaks contract 