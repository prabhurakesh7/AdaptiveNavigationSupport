executorservice multithreading environment 
make library synchronous asynchronous methods ul li waits result returns result li li returns future immediately processed things needed li ul strong core logic library strong customer library call passing builder object construct url object make http client call url executing response back json string send json string back customer creating object customer call call provide method separately library interface implements interface simple class perform actual task questions solution ul li daemon daemon threads case li li terminating tasks timed doesnt occupy limited threads long time li li method catching exception catch difference catch exception runtimeexception li ul started working solution terminating tasks timed reporting timeout client task continues run thread pool potentially occupying limited threads long time research online found cancel tasks timed cancel future shown wanted make method cancel tasks timedout calling stop running tasks queue approach provide terminating tasks timed dont impact 

blockquote daemon daemon threads case blockquote depends case prefer daemon threads convenient clients process exit blockquote blockquote doesnt interrupting io task pretty hard set timeout resttemplate canceling future case meaningless blockquote difference catch exception runtimeexception blockquote dont checked exceptions blocks difference runtimeexceptions case important implementing sync call async waiting bad idea meaningless consumes thread thread pool call create instance task call current thread 