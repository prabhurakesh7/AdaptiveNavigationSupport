spring webapp pure config make sense distinct contexts 
spring config wondering traditionnally spring webapps contexts root application context dispatcher servlet context root context basically service layer persistence configuration jpa data access layer servlet context mvc web related things web context inherits root context web components access beans root context opposite modern approach xml config make sense contexts simpler annotated classes regrouping beans layer data access layer service layer web layer load context examples root context created lifecycle managed simple webapp single maven module approach bring concrete benefits balance extra complexity practice 

advices opinions answer strong strong understood spring philosophia spring em em contextes mvc part mvc part em advises em separation concerns considered good practice force developper em em put single context configuration xml pseudo rule contextes relevant application move spring mvc framework strong strong relevant working large organization developpers work mvc part mvc part strong strong relevant simple application single developper expected evolutions exchange em practices em simplicity rules guidelines developpers depends general context size project organization general experience separating model part service persistence vc part user interface considered good ul li theory change ui part keeping model part migration traditionnal webapp fat client changing ui minimal restfull interface li li develop test layers adherence li li teams model viewcontroller parts neat separation responsabilities li li enforced corporate rules li ul 