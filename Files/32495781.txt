strange behavior application export option 
server application wich libs netty guava export application single jar run application eclipse didnt problems start app console windows ubuntu doesnt matter strange problem connection processes sockets toooo long simple http connection httpasync rabbitmq connection lasts min connection completed data sends receives fast figure problem mentioned eclipse development export project dif ways eclipse ol li extract required libraries jar li li package required libraries jar li li copy required libraries folder jar li ol option problem switched 3d option jars folder main jar problem solved generally big difference option jars inside jar thought extra time needed load classes execution time jars problem occurs start connections explain behavior strong upd strong eclipse luna doesnt matter os windows ubuntu doesnt matter jvm oracle jdk open jdk 

talks difference performance packaging jar extracting jar amp difference performance running eclipse running console h1 difference performance packaging jar extracting jar h1 h2 extract required libraries jar h2 strong strong br option eclipse extract classes referenced jars package generated jar open jar find referenced jars packaged classes referenced jars arranged package structure packaged inside jar root level brings key difference performance compared em packaging required libraries jar file em additionally cost runtime parsing loading jar memory strong exporting jar eclipse option performance concern scalable option ship jar strong strong manifest mf strong main thing file main class run jar directly running class br h2 package required libraries jar h2 strong strong br option eclipse ul li package referenced jars generated jar li li employ eclipses jar loading mechanism package generated jar package root directory generated jar li ul additional cost choose option run jar main class executed executed load main class libraries referenced libraries packaged manifest mf section strong manifest mf strong main thing file main class run jar run job br eclipse export option em copy required libraries folder jar em dont scalable solution imposes file system dependency dont h1 difference performance running eclipse running console h1 run application eclipse quiet similar 1st export option eclipse doesnt parse load jars runtime br trivial point key consideration eclipse jar export option option hr strong final words strong ul li extract required libraries jar exporting jar substantial performance gain ul li highly improbable socket connections lasting long run console jvm runs code comparable performance running eclipse console versions case feeling packaged jar performance extracted jar fine li ul li li amount logging running depending configuration eclipse mask lot logging saving time li li understand href https docs oracle javase docs technotes tools windows findingclasses html rel nofollow classes accessed jar class path additional computational cost referencing classes jar li ul 