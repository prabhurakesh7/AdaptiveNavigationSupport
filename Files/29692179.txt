jvm execute method code optimization 
book performance scott oaks encountered code jvm smart skip calculation part provided loop result future microbenchmarking code mentioned book statements book result fibonacci calculation compiler free discard calculation smart compiler including current compilers end executing code validate code elapsed time calculate doesnt reflect theory explained version code achieve scenario mentioned book jvm jvm optimize call 

modern jvms complex kinds optimization measure small piece code complicated correctly strong strong detailed knowledge jvm dead code elimination dce kind optimization frequently microbenchmarks awry classical mistakes read common mistakes href http shipilev net talks jvmls july2014 benchmarking pdf rel nofollow http shipilev net talks jvmls july2014 benchmarking pdf href http stackoverflow http stackoverflow ul li smallest unit compilation method benchmark main method li li warm iterations include warmup phase runs test kernel trigger initializations compilations timing phase li ul correction benchmark dce inlining lets start inlining trees compiler failed inline method apsum sum due href http hg openjdk net jdk8 jdk8 hotspot file 87ee5ee27509 src share vm runtime advancedthresholdpolicy cpp l275 rel nofollow osr fact href http www azulsystems blog cliff heck osr bad good rel nofollow osr compilation frequently triggered benchmarks microbenchmarks triggered frequently application code order results add warmup iterations result end iterations 