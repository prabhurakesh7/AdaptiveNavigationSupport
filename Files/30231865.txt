observable singleton class handle network calls bad 
develop client server game lot network request complete task client server receive multiple socket handle commands created class listens input separate thread send commands commands heterogeneous classes server class class created class listens observable pattern dispatch commands receivers interfaces problem class register call set listener multiple class reference thinking transform singleton class accessed singleton global class bad hiding dependency difficult test alternative passing class classes find solution edit clarify app turn based game dont large number parallel request 

common pattern addressed times environments primary issue address speed despatch commands arrive ensure command clog system unpredictable response times achieve manage arrival classic solution network listener minimum amount work command hand queue essentially grab arriving message place queue back listening dont deserialise throw queue end queue processes pulling commands constructing objects performing functionality listeners listen happen deserialised object despatched queue handling find point listen end queues network listener command processor implemented thread pools blockquote observable singleton class handle network calls bad blockquote bad stand high throughput disassociate network listener command dispatcher 