shuffle random comparator 
emulate behavior collections shuffle comparator vulnerable sorting algorithm implementation result breaking comparable contract 

impossible implement real shuffling comparator breaking contract fundamental aspect contract results em reproducible em ordering instance fixed pre initialize fixed ordering shuffling operation create comparator establish ordering bit pointless clear comparator em em collections elements list hr alternatively stable property values hasn ordering place sort criteria hash code augmented stable randomizable transformation key point instance represents randomly chosen fixed ordering create instance request ordering violates contract bit complicated care hash collisions resort property randomized hash code length simply fall back natural reversed order noticeable affects relation uncommon pairs create comparator values collisions instances covering properties values define equality comparator simpler 