deadlock swap function solve mutual exclusion 
solve mutual exclusion swap function program suffer deadlock dont problem occur thread exec consecutive times strong swap strong lock logic thread make em local em variable em shared em variable thread lock em local em variable assume thread em local em variable unlocked assume execute critical section thread em local em variable locked assume thread em busy waiting em busy waiting tests local variable unlocking calls em swap em function swap function sets em local em variable em shared em variable viceversa swap function atomic thread call swap shared variables unlock swap em shared em variable em local em thread access critical section end critical section thread unlock em shared em variable strong main strong strong thread class strong logic type mutex emphasized strong swap function strong strong shared var class strong 

imagine scenario ol li thread swaps local shared var shared var local li li synchronization swap synch class thread swap thread thread makes temp point monitor switches back thread li li thread finishes iteration loop printing messages exec leaving critical section setting shared var monitor moves thread li li thread proceeds swap left executes shared var remember temp step li ol deadlock produced shared var thread critical section swap atomic monitor move thread executing synchronized method threads enter method method synchronized lock class case static method instance object case static method order fix shared change swap executing finding making atomic possibility rid local href http docs oracle javase docs api util concurrent atomic package summary html rel nofollow compareandset href http docs oracle javase docs api util concurrent atomic atomicboolean html rel nofollow atomicboolean play role shared var moment atomic types guarantee atomicity volatility href http docs oracle javase docs api util concurrent atomic package summary html rel nofollow documentation thread reference excuse loose nomenclature atomicboolean signaling compareandset atomically update variable visible immediately threads 