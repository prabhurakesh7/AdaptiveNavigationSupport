proper dependency injection android di containers dagger 
developing structuring android app bluetooth connection amp http communication restful service happened dependency injection framework called dagger revolutionary started contemplate true spirit dependency injection blog posts opinions explaining concept suggesting constructor injection labelling field setter injections anti patterns concerns field setter injections di frameworks explicitly reveal objects dependency make dependency strictly required voice strong opinions valid object oriented dependency injection constructor injection concern android developing android app means dealing lot activities services fragments broadcast receivers handle constructor provide dependencies di containers dagger field injection dependencies strong pojo factories strong advantage di framework field injection ability provide separate modules production injects mock objects testing dont worth introducing performance overhead advantage strictly limited point view dagger reducing amount code write avoiding headaches wiring objects pass dependencies properly conclusion totally misunderstanding concept dependency injection missing strong proper dagger strong opinionated competent object oriented design educate proper di container lack insight understanding 

strong tl dr strong deal wiring classes huge advantage wire refactor bigger advantage find advantage huge advantage imho valuable part di adding refactoring existing code frequently situation leaf dependency graph extra thing root graph userstoragehelper context di pass object layer constructor oncreate onattach root target dependency di add dependency minimal refactor cost imo makes code understandable level inspect object set dependencies dependencies objects immediately information check easily dagger generates dependency graph overview pretty neat counter changing dependencies leaf object ripple effect graph isnt necessarily immediately typically find fixing di issue potentially massive refactor modify constructor dependency graph suggestion pojo factories dependency issue layer factory factory dependencies writing tedious code generate basically daggers provider supplying implementations testing extensively handle build flavours dimensions build types injecting types logger modules op real ad modules ultimately usefulness depends project dagger di situations situation kind multi tool lot ways overkill needed screw driver wine bottle opener doesnt solve problem wont make good hammer matter hard caveat harder add di start tend err side adding overkill option start project project wishing 