hashmaps reactive programming 
starting embrace reactive programming bit apply typical business problems pattern design database driven classes defined unit class instances managed creates instances database table stores key clear import data periodically notify dependencies pull map reactive creating map kind break monad approach make observable return monad specific key client intermediate imperative operations ideal start href https github davidmoten rxjava jdbc rel nofollow rxjava jdbc road hashmap lookup performance significantly intensive cases reactive approach pushing database refresh filtering matching id client optimal approach data causing memory leaks gcd practical maintain map make observable optimal reactive approach data driven classes discovered 

thing dont care earlier values post discouraging subjects written early days rx net quoted thought attribute possibility authors didnt understand subjects work run problems declared shouldnt subjects great multicast events coming single thread control source events event dispatching global listening mouse move events 