rest service race conditions 
lets imagine problem rest service implemented mysql spring http json technologies clients rest service mobile applications decompile code api rest service code obfuscated problem post method send money user application worried api write bot make post request times result send money requests processed simultaneously balance checking successful request real amount money account lets requests basically standard race condition multiple threads problem multiple servers related request server requests server rest requests server idea select update synchronize database level solutions ideas suggestions 

options ol li rely acid implementation database mysql case assuming innodb engine choose transaction isolation level href https dev mysql doc refman en set transaction html rel nofollow set transaction syntax combination locking reads mechanism href https dev mysql doc refman en innodb locking reads html rel nofollow select update select lock share mode locking reads understand concepts order choice simply isolation level prevent race condition locking reads cons trading consistency scalability tying application rdbms database difficult move nosql li li decompose back end web tier service tier option suggested atk comments scale web tier instances independently keeping single service tier instance single service tier instance makes synchronization mechanisms blocks solution work wouldnt recommend reduces scalability service tier li li enhancement previous option href http en wikipedia org wiki distributed lock manager rel nofollow distributed lock manager built synchronization mechanisms scale web tier service tier independently li ol 