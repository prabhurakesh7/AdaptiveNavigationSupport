observable batch lmax disruptor 
familiar href https lmax exchange github io disruptor rel nofollow lmax ring buffer disruptor biggest advanatages data structure batches incomming events consumer advantage batching makes system automatically adjustable load events throw couldnt achieve effect observable targeting batching feature href http reactivex io documentation operators buffer html rel nofollow observable buffer buffer wait emit batch expected number events didnt arrive subsriber waiting batch single item arrives stream emits single element batch processed subscriber processing elements arriving collected batch subscriber finishes execution batch events arrived started processing result subscriber fast process event time load higher frequency processing events time solving backpressure problem unlike buffer stick wait batch fill suggestions ring buffer 

rxjava disruptor represent programming approaches experienced disruptor based video talks basically large buffer producer emit data firehose consumers spin yield block data rxjava hand aims blocking event delivery ringbuffers notably observeon acts async boundary producers consumers smaller avoid buffer overflows buffer bloat applying routines approach routines boil callbacks callbacks yo callback callbacks send data pace frequency requests determines pacing data sources dont support op streaming require operators buffer drop values downstream doesnt request fast process data batches efficiently operator overloads time duration buffers ms worth data independent values arrive duration controlling batch size request frequency tricky unforseen consequences problem generally batching source process elements source create buffers size type contrast request called operator buffers data resulting longer buffers behaviors introduce extra overhead processing turn cold source firehose essentially lead buffer bloat 