amazon s3 cloudfront intelligently caching webapges 
website running tomcat elastic beanstalk generates artist discographies single page artist resource intensive artist pages dont change month period put cloudfront distribution front thought artist request served server good post explains edge location europe miss time resource limit resources cloudfront cache dropped counter changed server code store copy webpage bucket s3 check request artist page exists s3 server retrieves returns contents webpage greatly reduces processing constructs webpage artist ol li request server check artist page exists li li artist page exists webpage large 20mb downloaded server server returns page li ol wanted improve construct s3 bucket redirect website page artist request s3 bucket return page exists call server alternatively server check page exists redirect s3 page download page server 

op blockquote large 20mb blockquote volume data serve pretty large feasible requests decouple content generation content serving part reason minimize amount time resources takes server fetch data s3 serve aws supports href http stackoverflow pre signed urls valid short amount time avoid issues security architecture client initiates request check requested data exists s3 fetch serve generate content save s3 terms network resources consume 2x amount bandwidth time data exists pull server serve customer 2x data doesnt exist send customer s3 2x hr approaches assume base template data fetched ajax calls bring 2x factor architecture ol li strong serve content s3 strong calls product designed easily integrable basically incoming request return s3 url data exists create task sqs generate data push s3 based usage patterns artists estimate time takes pull data average return url valid estimated time completetion task client waits time makes request url returned earlier makes upto attempts fetching data case failure fact data existing s3 thought base case case make network requests client requests server transmit data s3 case doesnt exists client pulls s3 li ol br ol start li strong check data exists make network call strong similar serving data server case doesnt exist make requests time serve data synchronously server case doesnt exist hit check content generated previously case successful url error message successful hit s3 data doesnt exist s3 make fresh request post url server computes data serves adding asynchronous task push s3 li ol 