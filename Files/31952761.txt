close socket successful message handle 
writing program server client socket messages back situations sending message server waiting period time server back execute message planned ul li server machine possibly antivirus security li li clients room clients future li li parallel interleaved synchronization carried server side based clients output server li li machines ready sync parallel clients execute message interleave clients execute command sequential order li ul started build program setup message received server servers performs actions based input sends back message client problems past messages received properly question ul li socket alive end program li li socket open successful transmission full handshake place close socket leaving client connect time send message li ul 

open socket connection subsequent connections depends encourage simple simply open socket needed find means socket open long expect dialog client server dont force client establish connection hes talk quickly finally links connection pooling ul li href http www javacodegeeks simple lightweight pool implementation html rel nofollow http www javacodegeeks simple lightweight pool implementation html li li href http tutorials jenkov multithreaded servers thread pooled server html rel nofollow http tutorials jenkov multithreaded servers thread pooled server html li ul 