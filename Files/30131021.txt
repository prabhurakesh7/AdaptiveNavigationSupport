front cost object finalizable 
discussions finalizable objects typically discuss common indirect costs happen finalizable objects resources quickly garbage collected interested moment actual direct cost finalizable memory terms object allocation time oblique references existence cost number places href http www oracle technetwork javamail finalization html oracles article finalization memory retention issues notes blockquote allocated jvm internally records finalizable typically slows fast allocation path modern jvms blockquote strong jvm record object instance finalizable memory performance costs strong interested specific application produce retain millions incredibly lightweight objects adding single pointer objects incredibly costly weve fair bit work remove pointers smaller numeric ids packed subset bits field unpacking number shared immutable property id retrieved pool stores map remaining question handle garbage collection property values longer strategy considered reference counting objects created retrieve pooled id reference count incremented longer decremented option ensure decrement add finalize method act finalizable means additional pointer object front cost finalizable considered high application means additional objects allocated high question direct front cost finalizable 

finalizers strong awful strong retention issues performance perspective oracle jdk openjdk objects method backed instances href http hg openjdk net jdk8u jdk8u jdk file a006fa0a9e8f src share classes lang ref finalizer finalizer subclass finalizers registered end objects contructor steps call href http hg openjdk net jdk8u jdk8u hotspot file ade5be2b1758 src share vm opto parse1 cpp l1938 vm invocation href http hg openjdk net jdk8u jdk8u jdk file a006fa0a9e8f src share classes lang ref finalizer l85 finalizer register double transition vm inlined jit compiler worst thing finalizers constructor makes linked list href http hg openjdk net jdk8u jdk8u jdk file a006fa0a9e8f src share classes lang ref finalizer l50 global lock facepalm finalizers bad terms memory footprint addition reference fields href http hg openjdk net jdk8u jdk8u jdk file a006fa0a9e8f src share classes lang ref finalizer l42 extra fields phantomreferences finalizers ul li construction require transition vm back inlined li li extra fields inherited li li global synchronization made li ul href http pastebin x3c2mmcx benchmark compares allocation speed finalizable objects objects backed phantomreference 