spring transaction management transactional aop aop advisor 
confusion spring transaction management application implemented transaction management transactional service class configured spring xml implement transaction management configuration file transactional service class give benefits transactional told transactional implementation aop spring explain 

wont strong benefits strong dont requirements performance issues shouldnt reinvent wheel spring perfectly designed tested sharped instrument replacement enterprise application servers declarative managing transactions convenient readable aop xml configs benefits include automatic handling transaction management aspects declarative isolation propagation levels easy control nested transactions timeouts rollback conditions distinct transactionmanagers single method services class easy read easy configure easy method easy understand transactional attributes providing transactions implementation details method case plain aop time method check xml config find method elegant hand hard debug proxies declarative management tricky impossible extract bean context wrapped bean reflection lets monitoring purposes addition bean calls method wont delegated proxy bean proxy refers bean cure provide field set custom bean postprocessor implementation suffers strong implementation strong spring configured transactional management annotation beans definitions creates auto generated aop proxy subclass bean default behavior spring proxy delegating methods calls underlying bean spring injects transactioninterceptor transactionmanagers code interceptor simple inside transactioninterceptor determines invocation scope caller transaction exists propagation level choses transactionmanager configures timeout isolation level invokes method decides transaction commited rolled back choice made based caught exception timing 