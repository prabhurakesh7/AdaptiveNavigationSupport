managing model objects hazelcast 
general architecture system lightweight app server connects hazelcast common model dependency app business requires hazelcast cluster remain upgrades lose contextual session data map defined hazelcast stores class called fruit lets v1 app model hazelcast server deployed working beautifully production requirements woodwork forced make fruit class updating serialversionuid denote class problem deploy version api depends v2 model fruit class exists exception makes sense serialversionuid changed version version problem envision struggling wrap head managing change causing downtime cluster question folks experiences managing model hazelcasts object dependencies working strategies managing divergent model cluster migration valid strategy 

adding fields class reasons serialization serialized object version deserialized potential data loss serialversionuid fudged dont hazelcasts href http docs hazelcast org docs latest manual html portableserialization html rel nofollow portable serialization mechanism plays nicely read field doesnt exist stream happen start rolling class cluster reading remaining bytes object stream youre roll href http docs hazelcast org docs latest manual html customserialization html rel nofollow custom serialization mechanism important concept support borrow href http technology edmunds keeping data backward compatible html rel nofollow coherence em future data em future data refers fact de serializing object version class wont fields hold values object doesnt hold values potentially lost object pushed back cache moved node custom serialization support ability read values array bytes remaining unknown values byte array byte array unknown values stored object written back serialized mechanism working rolling upgrade cache node upgraded turn 