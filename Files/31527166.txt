scala interop issue involving boxedunit void return types 
problem href http stackoverflow questions interoperability woes scala generics boxing dont solution work require modification party code specifically em em myjavaclass extend scala class myscalaclass extends href https twitter github io util docs index html twitter app app rel nofollow twitter app app app extends href https twitter github io util docs index html twitter util closeawaitably rel nofollow twitter util closeawaitably turn extends href https twitter github io util docs index html twitter util awaitable rel nofollow twitter util awaitable finally extending myscalaclass writing myjavaclass blockquote error myjavaclass myjavaclass abstract override abstract method result twitter util duration twitter util awaitable canawait twitter util awaitable blockquote figured implement reason myjavaclass blockquote error return type void compatible scala runtime boxedunit blockquote changing method results blockquote error return type scala runtime boxedunit compatible void blockquote heck start googling answer href http stackoverflow questions interoperability woes scala generics boxing scala generates incompatible bytecode situation hack problem control twitter classes em em closeawaitably genericize original method implementation trick scalac admitting possibility unit type totally clear works dont control twitter classes myscalaclass myjavaclass em dont care em em method em extend myscalaclass myjavaclass implementing abstract methods defined myscalaclass worth scala jdk twitter util core case relevant dont requiring implement place scala class inheriting myscalaclass doesnt implement method builds fine playing 

similar trick scalas part javac confused things wrong jvm runs fine gory details twitter hierarchy simplified write class dont extend takes place extends unit trick signatures possibly present abstract fact javac em em isnt happy um javac make abstract explains real problem methods differ return type sanctioned generic object javac wont find correct javac bug scalac leaves unable implement classes workaround awkwardly composition linking classes scala leasts switch back 