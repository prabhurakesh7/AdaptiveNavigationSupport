math pow int int slower naive implementation 
yesterday question slow question poorly worded showed research effort quickly closed test found method run extremely slow compared naive implementation isnt efficient implementation dealing integer arguments code ran test computer linux intel x86 cpu output reported 10ms 2ms occasionally fluctuated millisecond ran strong 5x slower strong average research href http grepcode file repository grepcode root jdk openjdk b14 lang math math pow 28double 2cdouble rel nofollow grepcode offers method type signature defers href http grepcode file repository grepcode root jdk openjdk b14 lang strictmath strictmath pow 28double 2cdouble rel nofollow method native method call fact library offers function deals doubles em em answer question power algorithm handle possibility base exponent type double longer execute algorithm deals integers end boils architecture dependent native code runs faster jvm byte code assembly case strong level optimization made check data type run simpler algorithm strong information native method consistently run slower optimized naive method integer arguments 

ignore floating point arithmetic slower reason change implementation faster things exponent xor quick calculation perform algorithm fine values youll quicker reason calling native methods overhead meaningful quick calculate calling times href https stackoverflow questions makes jni calls slow makes jni calls slow 