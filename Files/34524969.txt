concurrent access public field observe inconsistent state 
reading goetz concurrency practice publication stated blockquote improper publication thread observe partially constructed object blockquote dont observe partially constructed subobject assume constructor escape constructed reference observed caller href https docs oracle javase specs jls se7 html jls html jls rel nofollow jls stated blockquote writes reads references atomic implemented bit bit values blockquote impossible thread observe partially constructed object wrong 

blockquote constructed reference observed caller blockquote logic breaks perfectly reasonable thing things atomicity mentions read reference youll previous starting default subsequent youll reference bits bits essentially make reference random place jvm heap terrible basically theyre reference null point valid place memory whats em em memory things weird h2 setting simple h2 ill assume simple holder ol li jvm allocates space holder object default values fields li li jvm invokes holder constructor ul li jvm sets incoming li li constructor completes li ul li li jvm returns reference object allocated sets reference li ol h2 reordering makes life hard makes programs fast h2 problem thread view events order synchronization points constructors dont special synchronization semantics slight lie full list synchronized actions href http docs oracle javase specs jls se8 html jls html jls jls constructors thread actions ordered means event ordered events instance reads local var theyll newly allocated object values constructor run youd called partially constructed object pretty confusing constructor multiple steps setting multiple fields setting changing field ordering steps pretty bets yikes h2 constructors fields h2 mentioned lied asserted constructors dont special synchronization semantics assuming dont leak exception fields em em guaranteed end constructor href http docs oracle javase specs jls se8 html jls html jls jls kind synchronization point steps em em applies fields ul li doesnt apply final fields li li doesnt apply transitively synchronization points li li em em extend state access fields constructor initializes adds values threads guaranteed list state end constructor including calls modify list constructor synchronization bets li ul important final wouldnt 