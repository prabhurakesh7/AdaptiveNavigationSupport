memory consumption collection sort 
arraylist filled million objects class sort list usage collection sort method allocated memory jvm increases dramatically questions normal reasons matter garbage collector working slowly started objects list fulfill specifications consume memory sort data thx 

order sort href http grepcode file repository grepcode root jdk openjdk b14 util collections collections sort 28java util list rel nofollow default sorting implementation creates array copy elements sorted additional heap consumption observe sorting copying generic sorting algorithm knowledge lists structure random access href http grepcode file repository grepcode root jdk openjdk 8u40 b25 util collections collections sort 28java util list rel nofollow sorting implementation changed delegated implementation default methods additional overhead href http grepcode file repository grepcode root jdk openjdk 8u40 b25 util arraylist arraylist sort 28java util comparator rel nofollow removed implementing efficient sorting algorithm upgrade resolve problem wrong garbage collection problem large arrays heavy handle fit young generation eventually trigger full collection mentioned comments actual sorting href http cr openjdk net martin webrevs openjdk7 timsort raw files src share classes util timsort rel nofollow performed em tim sort em implementation em tim sort em requires additional heap space javadoc blockquote temporary storage requirements vary small constant sorted input arrays object references randomly ordered input arrays blockquote del applicable case switch back previous merge sort implementation setting system property del em tim sort em efficient merge sort merge sort requires full array copy 