hashset performance 
understand based pretty similar makes code flexible minimizes implementation effort reference variable hashsets unnecessary class forbids element entry makes point fact takes byte memory element single array sets elements byte element figures correct arrays header strong argument correct advantages overweight performance hit strong wrong learn aswell 

question primarily opinion based ill summarize points topic ul li appeared years ago hard guess exact reasons design decisions made times wasnt high loaded applications performance played role simplicity li li suboptimal memory consumption problem bug href https bugs openjdk net browse jdk rel nofollow jdk registered discussions href http mail openjdk net pipermail core libs dev october html rel nofollow core libs dev held time time blocker real world applications li li uncommon applications memory usage unacceptable good alternatives trove href http trove4j sourceforge net javadocs gnu trove set hash thashset html rel nofollow thashset li li open addressing algorithms disadvantages significant performance degradation load factors close element removal difficulties href http stackoverflow related answer li ul 