jcr jpa dms performance benefits drawbacks 
research href https dev day content ddc blog jcrrdbmsreport jcr content images jcrrdbmsreport jcr rdbms report chapuis pdf rel nofollow jcr rdbms reading href http stackoverflow questions jcr content repository options posts uncertain jcr jpa document management system deal document types strong large files strong strong lot strong concurrent access users main reason jcr documents strong content strong specification deals problems interested storage versioning sort encapsulate document stuff jcr implementation jpa application specific remaining questions ul li read query performance jcr relate jpa vary greatly implementation rules thumb li li real world experience simillar case specific jcr implemenations mix relational database jpa li li worth overhead introducing jcr benefits filestorage versioning custom access control jpa extra flexibility introduce node properties runtime li li experience data integrity backup solutions li ul strong update strong question answered detail critical sight practical point view personally concerned technically related issues ol li documentation jackrabbit poor documentation guide href https jackrabbit apache org jcr object content mapping html rel nofollow ocm dead link em paragraph em search queries throw exceptions unknown reasons href https jackrabbit apache org jcr hops html rel nofollow todo basic tutorial standalone server working properly jdk8 documented li li maturity jackrabbit oak work progress solutions em em abandoned bleeding edge li li community opposite jpa research jcr leads href http www techwars io fight jpa jcr rel nofollow hits real problem project team technology stuck trival problems li ol 

short version documents structured semi structured content case hierarchically organized data storage jcr dont implement basic dms cms stuff youre time time long version jcr covers basic cases document content management systems specification versioning locking lifecycle management referential integrity extend data changing schema define node types model dont jcr implementations jackrabbit database backend making abstraction layer relational backend deal large data filesystem storage faster storing binary data database storing structured data nodes properties database jpa deal dms cms stuff low level programming jcr implementation model change requires schema change table layout trivial big table documents property column separate table document class model lifecycles model versioning hops jcr id recommend href http wiki apache org jackrabbit davidsmodel rel nofollow davids model application content worked project decided mix jcr jpa dont deal apis storage jcr implementations ul li jackrabbit reference implementation optimized read operations maintenance mode li li jackrabbit oak aiming highly scalable content repositories balancing read write performance core team jackrabbit li li jackrabbit filevault backend purely filesystem li li modeshape alternative implementation fast scalable rest api good documentation li ul btw jcr api implementations pretty restful architecture mind rest api mapping simple consumer explore content directly jcr api making easy integrate content applications read reveal internal design database jpa making consumer contracts break remaining questions ul li comparision charts usual depends data structure indices query design jcr implementations built caching youre typically iterating result sets general statement faster slower depends case li li similar thing satisfied jackrabbit implementation jdk7 data including user settings application settings repository jpa persistence href https jackrabbit apache org jcr object content mapping html rel nofollow object content mapping li li worth introducing jackrabbit user management dont implement access control jcr api jaas recommend jca resourceadapter administering user management access control expose jackrabbit api li li question data integrity backup special jcr jpa ensure integrity level database integrity jcr referential integrity backed db backup fs backup standardized accessing data backup logic li ul 