class instances giving hashcode 
encountering bizarre issue jboss server classes producing produces wouldnt care framework caches setters key comprised hashcodes class property bad design caching control moment ognl latest struts href http grepcode file repo1 maven org maven2 ognl ognl ognl ognlruntime ognlruntime getsetmethod 28ognl ognlcontext 2cjava lang class 2cjava lang string source newer ognl fixes issue wont struts beta makes issue bizarre ul li problem appears days usage pretty class properties cached time leads class instance hashcode em changing em equal days li li weve observed behavior outdated hotspot bit builds sun sparc li li jvm reports xx hashcode li ul read rng hashcode generator hotspot strategy produce duplicates racing threads imagine classloading triggering behavior hotspot special hashcode handling creating instance 

ol li override jvm handles specially regular identity hashcode inherited li li default jdk jdk identity hashcode calculated global park miller random number generator algorithm produces unique integers period chance objects hashcode reason li li algorithm relies global variable synchronized possibility threads generate random number due race condition href http hg openjdk net jdk7u jdk7u hotspot file 98167cb0c40a src share vm runtime synchronizer cpp l562 source apparently case li li identity hashcode generated object creation call method matter classes loaded problem happen objects called concurrently li li suggest default jdk option thread local xorshift rng subject race conditions faster park miller algorithm li ol 