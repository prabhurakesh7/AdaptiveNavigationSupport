remapper variables bytecode method inlining asm 
online bytecode method inlining optimization asm based href http asm ow2 org current asm transformations pdf rel nofollow http asm ow2 org current asm transformations pdf test inline callees calculate int int caller test based asm version code code extends renumbers local variables inline references coping body callee calculate caller test invokevirtual callee calculate call site bytecodes caller test callee calculate generated test javap result data class shows body callee calculate inserted place caller test line main problems ul li top stack objects invokevirtual callee calculate line aload br getfield field callee lcode sxu asm callee iload br iload stack inline li li variable number copied body callee calculate mapped number li li variable number correct variable numbers copied body callee calculate data class line line shoud begin variable numbers callee calculate renumbered rule change renumber conflict number copied body callee calculate li ul check base class implementation problem construction starts args length case class provide creates local variables mapping existing variable number index mapping array hr strong problem inline bytecode method callee calculate correctly suggestion efficient inline strong parameters stack inline line idea store created local variables referred copied body callee calculate add getfield field callee lcode sxu asm callee add main problem users allowed update variable number variable mapping array array private place update method hr strong update1 strong data class uncomment constructor inliningadapter stored variables numbered mapping inlined code mapping array updated method insert array kinds remappering ul li remapping inside inlined code line t0 variable index starts max index li li remapping inlined code line end variable index remapped index starts original index greater li ul 

holger suggested start uncommenting lines ol li tackle main problems listed extended thinks arguments stored local variables fixed locations normal situation entering method map line calculated constructor case arguments stack allocate local variables manually solution parameters stored local variables make treat reference variables allocate local variables achieve fooling arguments method static isnt change line variables remapped similar doesnt matter instance takes care allocating li li problem map class extend guess variables stored instance ul li guess correct remap references make extend rid remapper li li guess incorrect guess embed variables case li ul li li debugging inlined code linenumbers make sense code inlined class linenumbers replaced line number line inlined call occured source code files line line basis override passed constructor skip super call altogether li ol 