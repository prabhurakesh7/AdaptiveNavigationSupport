block queue forkjoinpool 
block threads forkjoinpool queue full standard threadpoolexecutor dequeue inside forkjoinpool dont access api strong update strong answer 

h2 research happy answer question h2 strong reason strong option forkjoinpools implementation due reason majority executors assume single concurrent queue threads leads queue contention degrades performance reading writing queue multiple threads approach scalable high contention queue generate large number context switches cpu business strong implementation strong forkjoinpool thread separate double ended queue strong deque strong backed array minimize contention strong work stealing strong tail deque task submission head current thread worker tail largest portion work words stealing tail worker thread minimizes number times interact workers contention performance ul li idea official white paper href http gee cs oswego dl papers fj pdf rel nofollow fork join framework doug lea li li scalability benchmarks shown href http letitcrash post 17607272336 scalability fork join pool rel nofollow crash scalability fork join pool li ul strong work thoughts strong global submission queues submissions fj threads enter submission queues workers tasks worker queues mentioned maximum size queues limited number queue full unchecked exception thrown javadocs threadpools constructor tend claim current implementation doesnt mechanism implemented consuming api ol li implement exponential back logic periodically resubmitting tasks incrementing time interval retry li li write throttler checks periodically size submissionqueue li ol href http gee cs oswego cgi bin viewcvs cgi jsr166 src jsr166e forkjoinpool view rel nofollow official jsr 166e code forkjoinpool information 