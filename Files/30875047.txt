return type covariance enforced hidden static methods 
code wont compile return type jls requirements overriding hiding blockquote method declaration d1 return type r1 overrides hides declaration method d2 return type r2 d1 return type substitutable d2 compile time error occurs blockquote question motivation compile time checking specific case static methods ilustrating failure verification compilation produce problems ideal 

bizzare things classes lets classes vendors release schedules compile time compiler method signature generated byte code invocation reference references method notice return type part method reference jvm executes code method method found direct super class searched found executed magic starts bs vendor releases version em overrides em binary run app binary stays recompiled tada runtime jvms searching ends time magical feature adds degree dynamism static methods feature honestly creates confusions em em remove notice searching works single chain parents java8 introduced static methods interfaces decide static methods inherited subtypes lets rabbit hole suppose releases version covariant return type compiles fine return type covariant feature previously overriding static method identical return type time jvm find found jvm considers distinct methods support languages runs jvm recompiled newest cs binary reference runtime bs vendor hearing complaints decides remove dangerous override static methods binary run recompiling boom runtime error found mess design oversight allowed static methods covariant return type intended instance methods update feature charming cases static factory methods returns returns specific api designers careful reason potential dangerous usages author subclassed users design 