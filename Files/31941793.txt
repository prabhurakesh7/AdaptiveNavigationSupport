multi key maps performance comparison 
h2 context h2 application stores lots data memory kinds maps fast lookups simple primitive maps map keys performance big requirement h2 problem h2 wanted find performant map implementation suggested href http stackoverflow questions create hashmap keys key pair compared implementations ol li map maps nested maps based util hashmap specifically keys li li wrapper key tuples keys util hashmap li li tuples keys net openhft koloboke collect map hash hashobjobjmap href http performance info hashmap overview jdk fastutil goldman sachs hppc koloboke trove january rel nofollow fastest map li ol h2 expectations h2 ol li nested maps fastest slowest put li li koloboke hash map faster jdk hashmap li ol h2 results h2 h3 benchmark h3 strong strong dont suggest primitive maps integer cheap object h2 questions h2 ol li koloboke map times slower jdk map li li nested maps faster expect allocation overhead tuple key object bigger li li benchmark wrong improve li ol hr h1 update h1 based good advices leventov changed benchmark triple implementation caches hashcode distribution tests named tuple2 results h2 summary h2 ul li tuple approach slow hash code function key class cached distributed koloboke li li concluded href http performance info hashmap overview jdk fastutil goldman sachs hppc koloboke trove january rel nofollow obj obj case util hashmap extremly fast li ul 

answer updated question problems benchmarks ul li making lifecycle pass state object benhcmark method parameter code li li benchmarking differently setup method collection created sufficient argument method call measure pure benchmark method li li lot allocations benchmarking method case hides collection performance contribution li ul written interesting results 7u55 8u51 vm change made substantially faster maps slightly slower requires investigation dont time href https github openhft koloboke issues https github openhft koloboke issues couple things ul li run benchmarks server vm li li disable cpu scaling run li li close heavy apps browser intellij hardware threads li ul 