compiler copy finally blocks 
strong strong ing compile code simple block produces output viewed asm bytecode viewer strong em code em strong strong em bytecode em strong adding block noticed compiler copied block strong strong times posting bytecode waste space copying doesnt limited maximum number instructions similar inlining works duplicated block added em em calls hr result custom compiler mine approach compiling code works executed requires space instruction compiler eclipse compiler copy bytecode block multiple times rethrow exceptions part optimization process compiler wrong hr output cases 

h2 inlining finally blocks h2 question analysed part href http devblog guidewire compiling trycatchfinally jvm rel nofollow http devblog guidewire compiling trycatchfinally jvm post show interesting information quote blockquote finally blocks implemented inlining finally code exits catch blocks wrapping thing essentially catch throwable block rethrows exception finishes adjusting exception table catch clauses skip inlined finally statements huh small caveat prior compiler apparently finally statements routines full code inlining concerned point applies blockquote hr h2 jsr instruction inlined finally h2 differing opinions inlining found definitive official document source explanations strong offer advantages trouble strong finally lining jsr ret offer major advantages quote href http stackoverflow questions compilers jsr instruction compilers jsr instruction blockquote jsr ret mechanism originally implement finally blocks decided code size savings werent worth extra complexity gradually phased blockquote strong problems verification stack map tables strong explanation proposed comments jeffrey bosboom quote blockquote javac jsr jump subroutine write finally code problems related verification stack map tables assume back cloning code easiest thing blockquote strong maintain subroutine dirty bits strong interesting exchange comments question href http stackoverflow questions compilers jsr instruction compilers jsr instruction points jsr subroutines added extra complexity maintain stack dirty bits local variables em exchange em blockquote paj28 jsr posed difficulties call declared subroutines entered start callable subroutine exit ret abrupt completion return throw duplicating code finally blocks ugly finally related cleanup invoke nested blocks supercat jan supercat true subroutines entered start return place called single subroutine strong complexity fact maintain stack dirty bits local variables returning merge strong antimony jan blockquote 