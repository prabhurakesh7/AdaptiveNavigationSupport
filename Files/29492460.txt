merge sort algorithm wait notify synchronization 
implement merge sorting wait notify synchronization aware high level constructions fork join executors work notify based href https courses cs washington courses cse373 13wi lectures rel nofollow https courses cs washington courses cse373 13wi lectures refactored method synchronized blocks input array result performance sorting slower single thread sorting guess bottleneck synchronization blocks left parts array refactor order make faster single thread sorting 

problem lies nested blocks holding locks start threads turn acquire locks threads blocked initiating thread releases locks implicitly thread calls em em wait condition time initiating thread calls releases lock instance thread spawned processing part proceed initiating thread holds lock waiting thread finished processing call releasing lock acquire return em em initiating thread call release lock thread start work equal sequential performance spawning threads threads enforced run due locks held initiating thread fix launching threads acquiring locks lock nesting blocks subject unspecified timing thread finished work called enter block called em spurious wakeups em simply verifiable condition checked calling explained href http docs oracle javase docs api lang object html wait rel nofollow documentation blockquote argument version interrupts spurious wakeups method loop blockquote condition flag set thread calling signal work free synchronization method invocations overlap implementation verifiable condition alive state thread ensure call protect spurious wakeups 