compiler jit optimisarion bounds check loop 
learned href http stackoverflow answer loops em compiler jit optimisations scenario long condition em tempted compiler optimizations happen hr em inside body em loop arraylist case em hoisting em method call hr strong edit strong havent obtained answer adding part question strong strong optimisations href http www cplusplus reference vector vector size rel nofollow href http www cplusplus reference string string size rel nofollow instance performance wise optimisation exist href http www cplusplus reference string string rel nofollow 

h1 h1 compiler eliminates bounds checking primitive arrays prove bound access jit aot compilers jit aot compilers limited move bounds checks loop loops reducing single check check fails run version code full bounds checking throw exception correct place collections complicated bounds checked called method place call generally eliminated bytecode jit aot compilers eliminate inline methods depends object instantiated stored things private methods virtual compiler make wont virtual call dont h1 h1 check bounds check bounds inlined depends specific compiler flags generally compiler remove bounds checking prove bound access move bounds check loop guarantee exception thrown correct place dont examples equivalent compiler dead code elimination assuming dont loop faster methods inlined put definition inside initialization 