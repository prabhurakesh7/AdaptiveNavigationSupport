closure captured unexpected result 
met classic situation javascript programmer expect code print peter paul mary doesnt explain works code compiles prints times mary guess matter implemented deep br doesnt wrong underlying implementation contrary enhanced loop adding runnables correct values captured finally classic loop adding runnables compilation error makes perfect sense variable final effectively final strong edit strong point captured moment add runnables matter execute lambda expressions version enhanced loop execute runnables correct distinct values captured earlier adding runnables words strong snapshot strong semantics put capturing values wouldnt cleaner make sense 

blockquote words snapshot semantics put capturing values wouldnt cleaner make sense blockquote lambdas em em capture semantics lambda capturing em values em values happen object references object reference captured object reference refers mutable object things confusing state lambda capture state lambda invocation specifically array refers change problem lambda capture expression captures reference lambda em invoked em performs dereference lambdas close values lexically enclosing scope lexically enclosing scope capture evaluation time expecting lambda full snapshot objects entire heap reachable captured references works make lot sense summary lambdas capture captured arguments including object references object reference object refers thing capture reference mutable object objects state changed time lambda invoked 