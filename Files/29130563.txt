terminate tasks timed multithreading 
make library synchronous asynchronous methods ul li waits result returns result li li returns future immediately processed things needed li ul strong core logic library strong customer library call passing builder object construct url object make http client call url executing response back json string send json string back customer creating object customer call call provide method separately library interface implements interface simple class perform actual task strong problem statement strong started working solution terminating tasks timed reporting timeout client task continues run thread pool potentially occupying limited threads long time research online found cancel tasks timed shown wanted make method cancel tasks timedout calling stop running tasks queue approach provide 

task queue cancelling simply calling dont queue interrupt task work task ignoring thread interrupted status make task thread regard thread interrupted status mentioned make http call close http client resource thread interrupted refer implement task cancellation scenario thread check terminate complex thread pool executors callable task task writing file http call simple thread pool executor starts running task caller cancel milli seconds future sends interrupt signal thread callable task check immediately writing file make happen callable maintains list io resources future cancel task calls io resources terminates task ioexception thread finishes rest http client related requirement modify factory class factory creating runnable task make pass list cancellable resources maintained modify method 