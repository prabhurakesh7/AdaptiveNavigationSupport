filtering primality inifinite stream numbers taking forever processed parallel 
creating infinite stream integers starting million filter stream naive primality test implementation generate load limit result works expected add call parallel filtering produced processing complete point direction whats happening edit primality test implementations intended long running implementation explanation negative impact parallel stream 

processing completes long time depending number hardware threads machine href https docs oracle javase docs api util stream stream html limit long rel nofollow api documentation limit warns slow parallel streams parallel stream splits computation parts parallelism level performs computation part join results parts task common fjp thread current thread fjp control adding practically task lower number set faster compute split unlimited task task handled iteratorspliterator href http grepcode file repository grepcode root jdk openjdk b132 util spliterators spliterators iteratorspliterator trysplit rel nofollow trysplit method creates chunks increasing size starting chunk handles numbers range handles numbers range hardware thread task split chunks checked hardware threads task split chunks numbers checked chunks processed parallel computation stop heuristic splitting task big chunks doesnt work good case performance boost prime numbers region thousand numbers scenario optimized internally stop computation thread found limit condition achieved feel free report bug bug tracker hr strong update strong digging inside stream api concluded current behavior bug href https bugs openjdk net browse jdk rel nofollow raised issue posted href http cr openjdk net tvaleev webrev r1 rel nofollow patch patch accepted jdk9 backported jdk 8u branch patch parallel version improve performance working time comparable sequential stream working time 