keypairgenerator genkeypair slow 
code run function work seconds change situation run work seconds slow code 

fast business logic optimized code assembly counts blow water cryptography perform calculations native optimized montgomery multiplier scripting languages generally worse call native code time optimize byte code means runs faster called multiple times call key gen em method called multiple times em application case runtime high optimize depends vm rsa key generation depends finding large primes finding large primes cpu intensive process depends random number generator create starting points actual random number generator implementation makes lot difference em em random number generator block entropy play random number generators find fast secure finding prime length process doesnt designated runtime large number picked case bits size start testing subsequent numbers prime hammers cpu calculate em average em runtime generating prime case generating lot live uncertainty time takes hr bit moot general dont oodles rsa keys generate user problem lot users protocol requires lot key pairs large rsa keys faster generating key pairs things ol li obtain native implementation li li switch algorithm key pair generation fast elliptic curve cryptography li li generate keys import application li ol fix protocol key pair generator 