multithreading websockets 
design question implementation multiple client connections server db conns client server communication web sockets single threaded application evidently design scale load server high response back clients takes long back end operations involve handling large amounts data question good idea create thread web socket connection imply threads clients number web sockets multi threading single threaded ease load server make life lot easier logic attain scalability create threads merit job rest processed main thread back problem future greatly appreciated 

approaches kind problem ul li thread request li li fixed number threads manage requests li ul approach thread improve pool thread handle requests number threads approach depends application strong cpu number long operations read write disk network increase number havent operations number thread closer number cpu cores strong strong existing web servers approaches http requests strong apache strong thread request strong nodejs strong event driven case system timeout unblock long requests server crashes 