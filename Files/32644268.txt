swig wrap std function objects 
similar questions found solution problem attempting swigify code std function application encountered shared pointers successfully handled shared ptr directive encountered vectors shared pointers successfully handled template method swig wrap properly callback directors template inline functional code examples things close working context function call helps sanitized reduced h3 thing callback h3 h1 update h1 based flexos great answer closer solution examples working advertised incorporating actual code ran issues expand earlier simplified definition thething h3 test thing h3 file moving parts basically int double code provided answer replaced shared pointer object h3 func thing test h3 test thing posted thing callback code posted original question compiles swig chain error swig trouble connecting dots creates classes methods simple main code return objects make fairly unusable idea fix detail completeness scripts compile run code parameters slightly dont matters end set eclipse maven project scripts reside root project headers swig files reside src main resources source files reside src main compiled classes reside target classes eclipse performs compilation h3 swigthing sh h3 h3 compilethingswigtest sh h3 h3 runthingtest sh h3 h1 update h1 fixed code pass parameters std function question answer complete working 

bit work answer generalised version href http stackoverflow previous mine answer problem specific instance targeting python assuming things achieve wrapping ol li call objects code li li wrapped objects passed object including crossing language boundaries direction li li write objects inside passed back modify existing code works objects maintaining type erasure cross language li li construct objects pointer function types li ol work show achieve ill solution language agnostic purposes discussion glossing part question doesnt change things youve working sufficient scenario make examples verbose needlessly solution working modelled existing support swig put test interface illustrate pre class lang cpp prettyprint override basically include file std fucntion macro takes arguments call instantiation template wrap call type ret return type remaining variadic arguments inputs function test interface basically wrap writing version std function isnt tricky basic working requirements pre class lang cpp prettyprint override includes header file generated wrapper code sets macro usage interfaces swigs support href http www swig org doc3 cplusplus11 html cplusplus11 variadic templates rel nofollow variadic templates isnt helpful usage scenario macro wrote basically implements href http www swig org doc1 swigplus html swigplus nn30 rel nofollow default template expansion functionality c99 variadic macro arguments supported coincidentally means swig code writing work releases tested version swig support works retaining macro rest glue makes callable manual expansion template limited bits care usage actual copy constructor handy thing renaming matches target language renaming regular function called call targeting python tp slots required sufficient interface work demonstrate wrote bit compiled pre class lang prettyprint override worked hr requirement pretty easy cross list point swig constructor accepts compatible function pointers href http www swig org doc3 swig html swig nn30 rel nofollow mechanism swig test interface file pre class lang cpp prettyprint override call compile run identically successfully point normal desirable classes created point start swigtype wrap pointer function types pointer function constructor callback constants hr requirement things start trickier essentially weve hit problem answered href http stackoverflow making swig generate interface previously macro generically turns instance interface generate fairly simple tricks inside macro make swig generate main thing order make work setup swig directors provide cross language polymorphism written implement interface class generated suffix impl code make things feel developers type implemented objects virtual dont swig directors type directly pretty common pass lead type href http stackoverflow questions object slicing slicing problems developer extends objects overrides extra work make object calls implementation directors handle automatically bit weird construct object meant implement special protected constructor constructor leaves member variable points real object creates anonymous wrapper object implements impl interface simply proxies back member object typemap applied pass object role detect case implemented object case special proceeds normal case takes proxy object asks convert back separate instance substituted behaviour languages feels weird side lot mechanical lifting transparently catch trivial automatically construct proxy object href http docs oracle javase docs guide reflection proxy html rel nofollow dynamic proxy classes part reflection api implement interfaces extend abstract classes possibility side variadic function argument whilst legal didnt override cases super class needed ended adapting href http stackoverflow macros iterate variadic macro arguments wanted fairly solution decided variadic c99 macro arguments reasons mechanism times total solution function declaration delgated call perfect forwarding properties retained typemap lookup performed distinct case custom typemap simplify code void function legal write special case void functions werent lets reality run testing slightly modified previous examples add implementation object std function substantially larger outlined pre class lang cpp prettyprint override test slightly expanded validate passing objects enable directors pre class lang cpp prettyprint override compiled ran previous examples worth noting weve crossed writing lot specific code design work languages targeting python lot simpler fix issues python specific features things id improve ol li variadic lambdas avoid macro preprocessor magic compatible constructor li ol hr macro expected macro problem implementation javadirectorin directorin typemaps applied prevent things working true build swig trunk outstanding question href http stackoverflow combining directors shared ptr work adding additional typemaps main file module call typemaps dead code forced call method abstract abstract class easier fix compilation method suppress typemap important substantially similar normal typemap creates representation pointer prepares object modify descriptor attribute directorin typemap packages module simply write hand remove spurious swigtype sstd shared ptr type generated virtual functions return shared ptr objects youll write directorout javadirectorout typemaps base normal typemap sufficient simple testing modified work version swig checked trunk today test failed didnt put effort making work work progress area 