interacting javafx network service gui 
transitioning writing swing application javafx write modern based gui application approach create network based reusable threading service coded network service controller class generated fxml net beans gui put threading logic private service member named wired start stop logic start stop buttons event callback br network based thread implemented javafx service restart service thread destination address recommended approach place stand task network service simple gui widgets configure packet transmit host port restart service host port widget network service running modify packet interrupting restarting datagramsocket place questions require guidance ol li recommended approach threading network thread fxml based application greatly appreciated li li safely communicate gui widgets action performed callbacks running service class li ol shown relevant parts controller class 

em background em answer based collection comments question rambles bit provide solution targeted code question address concepts question low level udp socket based communication system apologies em sample solution project em proof concept javafx app web socket based communication href https github jewelsea javafx websocket test rel nofollow javafx websocket test concepts href https github jewelsea javafx websocket test tree master src main org jewelsea websocket sample client rel nofollow client javafx task service code href https github jewelsea javafx websocket test tree master src main org jewelsea websocket sample rel nofollow sample client application controller project demonstrate executable implementation communication principles outlined href http www oracle technetwork articles javafxinteg html rel nofollow adam biens article javafx integration strategies james linked ol li setting web socket endpoint javafx service li li wrapping communication interaction async javafx task li li async event callbacks shunt success failure results back ui li ol additionally shows interaction network service javafx ui javafx ui making async requests service processing async responses recall seemingly simple web socket api gotchas proof concept careful basis robust network service em commentary thoughts em invariably tricky question answer imo due reasons ol li forms network communication suited applications li li standard practice integrating network services javafx applications li li providing robust network connection ui status monitoring exception handling straight forward easy wrong li ol subtleties dealt ul li event communication failure li li application issues requests faster rate network server process li li user shuts application messages outstanding li li ensure ui frozen lengthy communication processes occur li li provide ui feedback lengthy network processing li li underlying communication technology li li underlying communication stateful stateless li li communication blocking event driven blocking li li serialize deserialize data transmission li ul size fits communication model difficult standard communication model adapted fits similar href https en wikipedia org wiki ajax programming rel nofollow http ajax calls browser based network model href http adobe en flashplatform reference actionscript flash net netconnection html rel nofollow netconnections flash function wide variety arent optimal alternate systems web sockets http live streaming created ideally single standardized api href http api jquery jquery ajax rel nofollow jquery ajax javafx client server communication havent create javafx equivalent kind api unlike rest core javafx apis standardized high level interfaces network communication dont exist shelf form moment plenty libraries functions act basic building blocks developing service process higher level network protocol libraries href https tyrus net rel nofollow tyrus web socket implementation href https hc apache org rel nofollow apache http components underlying href http docs jboss org resteasy docs final userguide html single index html rel nofollow jax rs provider internal thread pools communication systems href http netty io rel nofollow netty based href http tutorials jenkov nio nio io html rel nofollow nio event driven thread managed javafx network client service things ul li href http tutorials jenkov nio nio io html rel nofollow blocking issuing async calls hooking response events relaying back javafx href https docs oracle javase javafx api javafx application platform html runlater lang runnable rel nofollow platform runlater li li blocking spawning thread task service implicit explicit executor service pool manage ui interaction actual network comms li ul key confusing thing javafx application code perform network communication async manner blocking call async wrapper task necessarily required blocking dont block ui thread task wrapper running thread prevents occurring make blocking calls simpler doesnt jdks blocking api low level pretty tricky code isnt high level application code generally application code higher level library jax rs web sockets akka preferably layer top internally manage details communication blocking blocking fashion provide event driven api sending receiving messages individual message events wrapped javafx href https docs oracle javase javafx api javafx concurrent task html rel nofollow task async processing javafx application point view event driven blocking application api works underlying communication protocol blocking blocking communication infrastructure blockquote proof concept application thing bit obscure safely communicate gui running service thread safely appears helloservice simple string property communicate gui service started communicate ui running background service thread manner sort message api blockquote href https docs oracle javase docs api util concurrent blockingqueue html rel nofollow blockingqueue fixed max size rejects additional requests queue full communication javafx thread based code consumer service elegant solution classic href https en wikipedia org wiki producer e2 93consumer problem rel nofollow producer consumer problem skip blocking queue creating async tasks ad nauseum fine low volume communication lead starvation limited thread resources high volume communication standard handle href https docs oracle javase docs api util concurrent executorservice html rel nofollow executorservice href https docs oracle javase docs api util concurrent executors html rel nofollow executors manages thread pool thread pool executor service defined href https docs oracle javase docs api util concurrent executors html newfixedthreadpool int rel nofollow bounded max number threads internally unbounded queue messages pile threads busy dont define blocking queue issue async service requests immediately handled threads requests pile internal queue href https docs oracle javase javafx api javafx concurrent service html rel nofollow javafx service works blockquote service default thread pool executor unspecified default maximum thread pool size naive code completely swamp system creating thousands threads blockquote blockquote executor service execute service daemon thread created executed create daemon threads custom executor threadpoolexecutor custom threadfactory blockquote sophisticated solutions simple blockedqueue messaging topic based message queue style solution based href https stomp github io rel nofollow stomp client href http blog kaazing steps build killer websocket app javafx rel nofollow kaazing message info service part requirement essentially async message send process response back alternatives ol li model request separate task onsuccess onerror handlers process task response running task service ensures handled executor fixed thread pool backed internal queue overflow li li write long running service interface api encapsulate blocking queue requests href https docs oracle javase javafx api javafx application platform html runlater lang runnable rel nofollow platform runlater handling communicating results back ui li ol make response handler logic dynamic adjustable caller pass handler function lambda function executed success original call href https docs oracle javase javafx api javafx application platform html runlater lang runnable rel nofollow platform runlater wrap call task service onsucceeded function dont runlater call implementation ensure onsucceeded handler called javafx thread task completes network request response require conversion marshaling unmarshaling data serializable stream higher level network apis jax rs web socket providers provide interfaces utilities work specific libraries types conversion href http www oracle technetwork articles javase index html rel nofollow jaxb xml serialization href https github fasterxml jackson rel nofollow jackson json serialization em slightly related info thoughts em bit topic href https gist github jewelsea rel nofollow blockingqueue task interaction network service demonstrate queues producer consumer situation reactive ui progress monitoring thing interesting href http akka io rel nofollow akka based solution javafx client server communication nice alternative traditional http rest soap rmi calls message queue based processing akka inherently event based solution fault tolerant asynchronous concurrent communication good match ui based framework javafx allowing developer process layer abstraction javafx based messaging client relies akka 