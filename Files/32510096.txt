space complexity 
wondering objects primitives created inside loop contribute space complexity instance heres code analyze space complexity algorithm heres reasoning number iterations equivalent input size iteration creating stringbuilder object creating stringbuilder objects proportional input size reasoning applied fact creating string objects char iteration reasoning correct reason encountered algorithm assignment made iteration algorithm space complexity understanding incorrect case checkunique algorithm space complexity 

bad design decisions algorithm suggest existing answers answer complexity class question dont point error question space complexity make copy entire input minus char loop held temp copy iteration space complexity match time complexity length shortest prefix duplicate duplicates pigeonhole principle ensures lt number unique values optimization algorithm return true codepoints input ascii languages dont codepoints range doesnt start alphabetic languages couple thousand glyphs point check repeats early part string scans entire potentially huge string character unique spoiler adding characters set find repeats time space low constant factor overhead hr performance mind utf16 href http docs oracle javase docs api lang character html rel nofollow unicode codepoints multi char encoding unfortunate worst worlds doubled space usage compared utf8 ascii deal multi element characters designed 16bits hold unicode character utf16 avoid difficulties multi byte character encodings utf8 wide characters popular windows idk unix posix internet protocols pretty standardized utf8 href http stackoverflow questions iterate unicode codepoints string iterate codepoints looping scan beginning string iteration find surrogate pairs smart jvm notice redundancy optimize wouldnt count hr h2 analysis original algo h2 basic design looping character checking characters makes sense easy lot redundant work checking diff algo implement lot constant overhead version ul li loop chars original string wrong char position cheap li ul hr ul li make temp copy input string includes characters strong biggest sin algorithm strong copying memory slow esp input string big fit cache href http stackoverflow questions space complexity comment52879960 louis wasserman modern jvms recognize loops create destroy object iteration flood garbage collector copying overhead touching byte original copy iteration means string stop fitting cpus cache half design li ul ways avoid copying string time ol li copy array current char consideration modifying href http stackoverflow questions test array search li li copy stringbuffer modify current position step href http docs oracle javase docs api lang stringbuffer html setcharat int 20char rel nofollow hrm specializations indexof single chars stringbuilder dont tempted deletecharat insert theyre implemented shuffling remaining elements li li main library function suggestion array searching doesnt work arrays primitive types loop manually skip depending jvm looping input string manual fast li li multi arg versions search beginning expecting search stop position expecting found li li search backwards expecting return search backwards beginning string search forwards li ol hr ul li check em entire em string char current char check em rest em string checked previous characters current current pick solutions copying string leave part checks choice li ul hr ul li doesnt stop quickly duplicate pair early string performance large small matters searching characters wont touch memory holding input characters repeat match case youre start end algorithm ascii text input em em common ascii characters repeat chars characters duplicates li ul quickstart pick tunable parameter smaller cpu cache plenty big repeats search point starting array sophisticated working blocks lets stop optimizing algorithm fundamentally slower hr h2 algo h2 strong temporary storage time strong speed simple array ascii range hashmap href http stackoverflow answer question finding frequent character work unicode codepoints dont search based methods slower bitmap option implementing set detects repeats bits bytes test set bits 8k bitmap found set approach isnt good codepoints hr alternative char array string sort loop log em em slower hashset hashset method radixsort bucketsort detecting duplicates fly problem utf16 multi char codepoints idk efficiently sort array preserving 