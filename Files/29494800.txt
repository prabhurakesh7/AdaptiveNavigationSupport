understand source code arrays copyof 
trouble understanding source code ol li line checking li li differences good cases li li line compiles crashes run time expected method li ol 

blockquote line checking blockquote checking simple equality purpose micro optimization unusual casting type incomparable types basically equality comparison compile sides subtype supertype rules generic types bit complicated cases comparison doesnt compile evaluate true reason supertype supertype object array types href http stackoverflow generics invariant presence wildcard comparison blockquote differences blockquote ul li creates array normal type statically remember code checked li li reflection dynamically create array type passed li ul blockquote good cases blockquote operation reflection href http stackoverflow generally slower reflective counterpart href https docs oracle javase tutorial reflect reflection tutorial blockquote reflection involves types dynamically resolved virtual machine optimizations performed reflective operations slower performance reflective counterparts avoided sections code called frequently performance sensitive applications blockquote se filled micro optimization writers se squeeze wouldnt worried performance hit case href http hg openjdk net jdk7u jdk7u hotspot file 6e9aa487055f src share vm classfile vmsymbols hpp l691 href http bad concurrency blogspot uk arithmetic overflow intrinsics html hotspot intrinsics means ideally calls methods replaced machine specific assembly anecdotally ran tests found difference negligible code question relic equipped jvms reflection disabled contexts strict security applet typically normal desktop application blockquote method blockquote general overload overload change type array ul li widening li li narrowing li ul typical href http docs oracle javase docs api util arrays html copyof int 