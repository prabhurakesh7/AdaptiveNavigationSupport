xpath memory leak 
situation torturing months oom exceptions heap space inspecting heap dumps found millions instances objects allocated allocated underlying libraries blood sweat tears managed localize code generating memory leak composed minimal complete verifiable code sample illustrate code ul li load document li li strong endlessly strong perform xpath query document packages strong storing result pointers strong li ul run create javafx application add file named mvc default package enter code hit run profiling tool visualvm quickly show matter minutes heap grows uncontrollably objects allocated released ul li li li li li li li li ul behavior time run code url load xpath execute document setup tested ul li mbp running os yosemite date li li jdk li ul reproduce issue actual memory leak strong edit strong colleague mine reproduced problem w7 machine jdk ubuntu server strong edit strong tested jaxen alternative javax xml package results leads bug lies deep sun webkit 

reproduced leak jdk1 ubuntu profiling debugging core simple fixed easily memory leak xpath stuff class em sun webkit disposer em continuous cleanup internal structures created xpath evaluation disposer internaly calls cleanup em invoker getinvoker invokeoneventthread em decompile code implementations invoker threads work javafx invoker performs cleanup periodically javafx thread em changed em listener method called javafx thread returns cleanup chance occur modified code em changed em method spawns thread returns processing asynchronously guess memory grow 