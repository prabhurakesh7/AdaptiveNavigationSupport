proguard obfuscate method body 
proguard obfuscate jar program works fine fact proguard obfuscate local variables method bodies strong em raw em strong img src http stack imgur oqbld png alt enter image description strong em obfuscated em strong img src http stack imgur ymev5 png alt enter image description variable names highlighted yellow obfuscated obfuscate make renamed em em proguard config href http pastebin sb3dmrcc http pastebin sb3dmrcc method excluded classes 

blockquote proguard obfuscate method body blockquote br names method arguments local variables simply stored compiling br names youre generated decompiler compiled code store data locally method ul li operand stack li li local variables li ul operand stack stack br href https docs oracle javase specs jvms se8 html jvms html d5e22660 table vm specification stack operators br pop values duplicate top swap top values slightly altered behaviour br instructions produce return drop stack important thing question things stack referred stack br relative top position based instruction br assigned numbers names whatevers called local variables variables br access index br variables special instructions single byte variables accessed byte instruction byte index br href https docs oracle javase specs jvms se8 html jvms html d5e22660 table loads stores br entries tables wide byte store load instructions data type single values converted leaving single slot values double slot twenty instructions instructions direct access registers instructions access array indices inside arrays strong strong converted waste space instructions size maximum stack size number local variables limited header attribute method defined href https docs oracle javase specs jvms se8 html jvms html jvms section interesting thing local variables double method arguments meaning number local variables lower number method arguments br counting values vm variables type treated values slots br static methods argument requires slot lets code local variables argument br addition constants lot external references ul li class li li class li li class li li method li li field li li method li ul exports default constructor compiler generate constants references exports exported href https docs oracle javase specs jvms se8 html jvms html jvms constant pool local variables argument names compiling disassembling class yields default constructor method step step br accessed br isnt accessed bytecode dealing beginning method reference string array local variable overwritten reference show constant pool pass flag doesnt add output relevant information constant pool displayed comments lets decompilers produce jd gui jd core procyon exported constant pool persists jd gui simply picks names local variables procyon optimizes br argument original perfect show correct anymore decompilers simply rely pattern picking dont true names decompiled code coming fairly theyre contained jar file br feature ide 