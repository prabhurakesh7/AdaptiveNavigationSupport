volatile synchronized 
ol li volatile keyword refresh invisible data thread read volatile variable potential invisible variables references variable read okey visible correct values reading synchronized synchronized block read variables varibles visible li li hapen thread change variable set varible age synchronized block thread die written thread stack main thread change background thread die retrieved li li question background threads main thread notified die thread wait finish work continue assure variables made background threads visible main thread put synchronized block background thread finishes dont access variables changed background threads synchronized blocks time threads dead overhead values unnatural read fake volatile variable fake synchronized block refresh data refresh data li ol hope questions explained advance 

fully covering topic level question imply require stackoverflow answer strong recommend good book multi threading programming strong guarantee read write accesses qualified variable totally ordered respect accesses variable br preventing read write accesses reorder previous future instructions enforcing side effects access writing thread visible reading thread means volatile variable read written code instructions executed time beginning side effects previous completed visible thread understand means question mine href http stackoverflow questions difference memory barriers lock prefixed instruction difference memory barriers lock prefixed instruction strong strong strong stronger strong guarantee usual treating read write access side effect regard optimization purposes means doesnt simply imply variable read memory time memory barrier block simply guarantees exclusive thread time execution block code br doesnt imply thread memory access order thread write protected shared data structure write lock circumstances full memory barrier emitted enforce writes reads volatile variables made thread visible threads program order suffices synchronization relationship inter thread accesses hr ol li li li shared vars stack thread copy variables exists independently thread br thread dies gracefully write retrieved beware memory ordering br thread dies forcefully interrupted actual assignment implemented thread stops write shaded var direct assignment copying local stack write happened li li dont main thread reads background threads write vars li ol 