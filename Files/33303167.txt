javafx application class controller class 
teaching javafx simple program hardcoded view turning fxml scenebuilder building uis writing separate controller class application class file fxml file initialize method linear flow display ui populate fields wait input view pops app errors controls mapped variables fmxl tableview lt table table null put initialize method debugging controls injected initialize return null initialize exits question javafx instantiate instance application class separate controller class explain variable scope controls injected called back javafx actions 

default behavior create instance controller class instance controller specifically ul li read root fxml element ul li root fxml element attribute ul li controller exists throw exception create instance class set controller li ul li ul li li continue parsing fxml file elements attribute controller exists mechanism inject fields controller similarly register event handlers calls methods controller instance li li invoke controller controller exists method li ul question asked blockquote application class controller class blockquote terrible idea simply subclass controller class instance subclass created annotated fields injected instance method invoked instance fields initialized instance invoked method invoked instance question meant blockquote application class instance created launch controller blockquote answer small demo programs intend immediately discard bad idea code fxml file strong strong attribute problem separation flexibility create instance view defined fxml file end subclass instance counterintuitive application instances advocate separate class controller basically case subclass minimal code starting application step complex class attribute controller exists checks href http docs oracle javase javafx api javafx fxml fxmlloader html setcontrollerfactory javafx util callback rel nofollow exists controller set result passing method created calling class effectively calling argument constructor 