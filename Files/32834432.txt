maintaining transaction flow jersey rest 
pretty rest world hands migrating application rest based architecture working proof concept working proof set achieve rest architecture front end screens angular call rest services open customer session perform maintain transactions session session complete session details customer transactions customer session commit db write db customer completes transactions session words commit db session ends hoping directions perform steps classes browser initiates request open customer session session post service generate session id session id back response browser strong question strong em maintain session id classes em customer transactions performed session transaction processed transaction post service save transaction information session information strong question strong em classes maintain transaction information associate transaction information session information created previous session post information client maintain session id service side map transaction session id send back combined session payload includes session information transaction session em customer perform transactions transaction performed transaction post request session id created additional transaction performed session id service side session id session details transactions session finally session complete information session session payload service side transactions commit db general guidance classes jersey rest pointers appreciated ali 

basically question isnt easy requires lot writing ill reply remember rest stateless means session client authorized em em request separate topic nice authorization method rest href http jwt io rel nofollow json web token rest nouns verbs avoid urls model domain nouns default http operations post create put update read delete remove guess session transactions abstraction show model shopping cart examples doubled urls prefix show refer resources ways ol li create shopping cart creating session request empty details cart response newly created shoppingcartid li li add item shopping cart create transaction request details item added response returns newly added item unique id li li pay shopping cart commit transactions request response details newly created payment li ol general answer difficult give precise answer wide question strong edit strong discussion comments opinion db transactions temporary table approved dont db persistent store highly recommended imagine happen case server restart transactions approved lose data options ul li memory write simple memory structure synchronized access simple case plain mind fact keeping data risky erased easily li li file system dont db file system transactions data theyre uncommitted adding transaction written file commit file read transactions saved db synchronized file access important data format json xml plain serialization li li idea head memory db redis data erased system reboot theyre deleted opinion db easier maintain traditional db li ul depends implement imagine scenario uncommitted transactions simply removed persistent storage ideas 