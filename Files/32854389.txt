convention objects created builder pattern immutable 
book design patterns elements reusable object oriented software blockquote builder pattern separates construction complex object representation construction process create representations blockquote general builder pattern solves issue large number optional parameters inconsistent state providing build object step step provide method return final object builder pattern build method generate object witch immutable question builder pattern keeping setters methods class generate object allowing possibility mutate built object produce mutable objects shouldnt builder pattern 

builder pattern helping solve telescoping parameter problem ul li make api easier clients setter methods naming easier remember li li builder pattern enables optional parameters offered telescoping constructors potentially awkward overloading li li client code builders documenting code constructors enabling client code easier cheaper maintain li li builder pattern reduce bugs large lists identically typed parameters accidentally transposed telescoping constructors case compiler wont report error resulting bugs removed hard track li li mandatory parameters objects constructor signature builder compiler insist mandatory parameters provided compile time li li apis evolve time easy add setter methods builder object easy error prone manage set overloaded constructors li li builder pattern concurrency friendly mutable builder object thread confined threadsafe li ul builders constructing immutable objects objects data supplied build time large amount data supply multiple steps completed builder pattern pretty easy recommend rule builder objects build mutable objects mutable objects javabeans pattern benefits easy readability documentation reduced error prone ness code 