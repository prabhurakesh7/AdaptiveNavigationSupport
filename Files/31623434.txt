spring integration transformer element include router functionality 
component ol li receives message enacts transformation payload header message acts transformer li li based values passed header route channel acting header router li ol id configure purely annotations xml ill absolutely regard xml solution pass helps case transformation transformer enacts message payload dependent custom loaded header channel message transformer dependent header aware solution involves multiple transformers transformation type defined header router avoid solution single router single transformer 

spring integration channels act beans service activator invoke method bean bean required channels injected annotation select channel injected autowire wich indexed bean channel pass transformed messages channels spring boot app gateway interface service invoked integration config finally simple integration test output strong em em strong main benefit developing message based systems create application small loosely coupled components easy test reuse change creating component plays roles process brakes rule additionally code realy tied spring integration create create couple components single responsibility configure act chain create transformer modifies payload headers message transformer encapsulate business logic set header routing transformer business logic header enricher adding header lets assume single class define class bean config 