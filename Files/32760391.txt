calling methods class multi threading 
class methods main class blow multiply add division methods executed sequentially execute multi threaded result faster call method class dynamically based inputs pass thread return result thread calling thread 

multi threading slow application amount processing step small justify overhead distributing work threads application finishes perceive assuming simplified write strong update strong explicitly defined executor ul li shows readers em em explicitly define executor alternative li li defining executor variable switch common forkjoinpool executor type changing variable assignment dont refactor methods li li default completablefuture async methods share common forkjoinpool parallel streams forkjointasks specific executor members team carefully common forkjoinpool end mixing async operations cpu bound processing pool accidentally li li default parallelism set runtime getruntime availableprocessors suit case hand users single threaded configurable system property util concurrent forkjoinpool common parallelism change defaults li ul 