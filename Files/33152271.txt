android app architecture packages formed 
android programming programmers create packages collection activities fragments adapters intuitive put code required activity screen place home screen activity fragments adapters custom views place definite reason general practice traditional practice 

creating components reusable objects code maintenance codebase grows approach work small application rule generally creating package file structures recommended common approaches makes easier make modifications code work project activities spread packages folders tasked changing ui traverse packages makes difficult identify ui patterns harder patterns implement package folder creates problem patterns ui components data object models view controllers user object create objects reusable code lets decide reuse user object class class packages order follow pattern ui element method implement place base object make user object public reference packages folders answer begin create objects places based evolution code based logic ease maintenance things makes difficult train person codebase user object sit place user account object ends needed user object project grows hundreds classes approach unmanageable applications classes packages based ui requirement based function performs maintaining challenging case lollipop marshmallow apache http deprecated dependency scattered project lot places handle change small project fine larger project development taking place real mess modifying packages folders locations data access layer model layer components encapsulate behavior folders scope easier merge project easy people work components impacted follow guidelines small projects project grows people involved development variations general practice group purpose function group ui visual component start place work deal change starting structural support early project put project risk completed answers links guidelines hope answer helps explain guidelines exist heart question 