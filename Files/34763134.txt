time memory efficient xpath parser 
implementation xpath parser intuitive comparable memory time efficiency href http vtd xml sourceforge net rel nofollow vtd xml perform nested xpath expressions additional performance gains current project lot xpath parsing vtd xml fast memory efficient difficult learn convoluted syntax looked href http www xom nu rel nofollow xom xalan parsers xalan poor performance comparing vtd xom hand good lacks feature nesting xpath expressions nested expressions possibility execute xpath search position document beginning answers 

easily find replacement vtd xml fast xpath memory saving fundamental reason object allocation element nodes strings attributes incurs bit memory overhead overheads tend accumulate construction dom tree leading significant memory overhead observed object based xml modeling apis dom vtd xmls underlying modeling approach dom style api differs drastically dom api accustomed dom learning curves expected vtd xml ways intended code convoluted ugly ignore underlying principle reducing eliminating object creation app end sluggish tools world 