warning overloads method m1 potentially ambiguous method m2 
compile couple warnings change warnings disappear program warning free warning methods ambiguous suppress warning 

warnings occur fun intersection overload resolution target typing type inference compiler thinking ahead bit warning lambdas written explicitly declared types call type compiler infer completed overload resolution matches overloads whichever overload chosen influence target type argument turn affect type inferred isnt information compiler decide method call line result compile time error interestingly mentions overloads comment error respect overload imagine policy compiler completed overload resolution specific rule choosing overload arg definite target type apply lambda compiler designers felt subtle cases programmers surprised overload ended called compiling programs possibly unexpected felt safer make error force programmer disambiguate compiler issuing warnings method declarations code programmer write call methods shown result compile time error disambiguate call write declare explicit type parameter add cast lambda arguably worse dont callers api wrestle kind thing point call warnings dont occur case type supplier determined local reasoning type inference youll rethink youre putting api methods argument types rename methods avoid overloading se apis similar cases 