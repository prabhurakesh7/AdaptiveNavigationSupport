spring code thread 
class designed run spring boot controller admin data lives oracle table record needed data changed application app read data admindata entity bean hibernate practice admin data updated high volume web application data read frequently needed call post considered atomicreference lt case volatile keyword thinking thread method returns reference fetching updating reference atomic ondatabasechangenotification call execute atomically call repository method executed call oracle thread running reference assignment cachedad atomic thinking call setinitialvalue executed thread added synchronized strong update strong based comments sleep admindata threadsafe made threadsafe making immutable approach work concerned performance strong update strong based comments research rewritten class decided immutable object hold administrative data created additional immutable class called admindataimmutable class immutable inherently threadsafe return caller avoiding overhead cloneing cached instance wont worry developer misusing future wont defend protect copies database pointed synchronize repository update reference cached object concern reference update atomic design method simply return reference code version make sense strong update strong made cachedad volatile 

suppose useless secure updating reference making object thread mentioned method updating references atomic operation oversecure reference admindata object threadsafe review code admindata object notice worth code method make thread assume number caller threads cases make thread code high stack decrease number critical sections reduce code complexity rework review code admindatarepository case assume caller analogy worth add called threads time call threadsafe threads call synchronized secure method concurrency calls problems case interacts shared data adrep object retrieve data oracle database simple imagine call increment internal counter shared calls putting method pitfall case object object lock object secure case injected singelton object injected class trouble useless calls time classes injected case secure object letter give idea analyse code choose correct decision conclusion step step ol li make object threadsafe call li li object lock li li object worth review internal code info valid case plain spring internal logic make calls bean thread li ol 