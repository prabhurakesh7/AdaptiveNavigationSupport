arrays foreach method iterable 
missing href http docs oracle javase docs guide language foreach html loop statement called enhanced loop introduced appears introduced iterate em collections em collection container class implements href https docs oracle javase docs api lang iterable html interface eligible iteration loop historic reasons arrays implement iterable interface arrays ubiquitous accept loop arrays generating bytecode equivalent traditional loop href https docs oracle javase docs api lang iterable html foreach util function consumer method added interface em default em method made passing lambda expressions collections iterating arrays dont enjoy treatment understand workarounds technical reasons javac couldnt enhanced accept arrays foreach accepts enhanced loop appears code generation requiring arrays implement naive important newcomer language naturally arrays syntactical natural switch lists 

bunch special cases language jvm arrays arrays api barely visible arrays declared ul li li li li li arrays component type li ul declarations arent visible source code href http docs oracle javase specs jls se8 html jls html jls jls href http docs oracle javase specs jls se8 html jls html jls jls explanations visible reflection returned call surprisingly field method arent visible reflectively field isnt field turns special bytecode call results actual virtual method call receiver array type handled specially jvm notably array classes implement interface enhanced loop added se supported cases hand side expression array type href http docs oracle javase specs jls se8 html jls html jls jls reason instances arrays handled completely differently enhanced statement section jls full treatment put simply situation code syntactic sugar array code syntactic sugar arrays implement implement interfaces compiler synthesize implementation backed array precedent compiler synthesizes static methods automatically added class href http docs oracle javase specs jls se8 html jls html jls jls arrays low level construct accessing array expected extremely inexpensive operation idiomatic run loop index arrays length incrementing time enhanced loop array enhanced loop array implemented protocol people unpleasantly surprised discover looping array involved initial method call memory allocation creating method calls loop iteration default methods added didnt affect arrays noted array reference type turn stream calls access nice special cases language jvm arrays replaced em real em constructs fixing bunch array related problems poor handling dimensional arrays length limitation subject arrays investigation led john rose johns talk jvmls href http medianetwork oracle video player 1785452137001 video href http cr openjdk net jrose pres arrays pdf slides ideas relevant discussion include introduction actual interface arrays libraries interpose element access support additional operations slicing copying investigation future work array enhancements committed roadmap release writing 