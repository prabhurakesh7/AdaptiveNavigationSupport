microservices solve security user authentication 
lot discussion microservice architecture missing understand solve issue security user authentication develop microservice rest service interface workflow engine engine based jee runs application servers glassfish wildfly core concepts workflow engine call user centric means depending role access level current user workflow engine produces individual results user centric tasklist processing open task depends users role process eyes service accessible plans implement modern ajax based javascript application workflow microservice problems avoid cross scripting problem javascript ajax javascript web application deployed domain microservice runs microservice forces user authentication case scenario application provide transparent authentication mechanism situation complex client access user centric microservices forcing user authentication end architecture services client application running application server domain problems solved practice architecture 

short answer check oauth manage caches credentials microservice access microservices manage careful security specially mind access credentials network topology friend create dmz layer internal layers reflecting dependency graph microservices long answer reading question good simple silver bullet problem recurrent related microservices distributed system things behalf user distributed credentials enable solution true mainframe times violate href http www linuxproblem org art html auto ssh sense thing sound glorified describe simple end enables processes machine services machine grid world href http toolkit globus org globus toolkit instance bases href http toolkit globus org toolkit security distributed security ul li certificates li li myproxy manages repository credentials helps define chain certificate authorities finding root trusted default li li extension openssh de facto standard ssh implementation linux distributions li ul href https en wikipedia org wiki oauth oauth provide authorization extra restrictions instance imagine user read write permission service issue oauth authorization necessarily give full user powers party give read access cors mentioned answer end client typically web browser single sign web sites problem closer cluster microservices managed advantage solutions developed grid field ensure security cluster distributed sites high availability reasons instance complete security unattainable credentials valid forever care secret received purpose recommend partitioning network layers layer degree secrecy exposure world burden required infrastructure oauth basic http create tokens href https en wikipedia org wiki basic access authentication basic http authentication client send credentials request eliminating session state server side purpose authorization create mechanism change login requests token returned response successful login subsequent requests token act basic http authentication advantage takes place application level contrast framework app server level basic http authentication 