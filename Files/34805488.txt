finding common substrings strings 
problem statement find common strings strings case print longest string problem statement blockquote write program find common substrings strings include substrings contained longer common substrings input strings results ul li due li li due li li due li li due li ul result set em em include contained mentioned include covered dont make string utility methods indexof stringtokenizer split replace blockquote algorithm starting brute force switch optimized solution improve basic understanding attempt figure time complexity approach strings n1 string n2 string ol li number substrings s1 n1 n1 li li find average length substring s1 li li ll find separately li li time complexity check string substring string li li checking string substring s2 n2 string li li algorithm li li time required algorithm li li tn number substrings s1 average substring lengthtime character comparison procedure li li performing calculations conclusion time complexity li li job find terms n1 li ol attempt find terms n1 br sum lengths substrings average division sum total number substrings produced simply summation division problem solution running time algorithm mind wrote code explanation code issue inputs case s1 s2 output case s1 s3 output output figure design code 

proper algorithm task brute force approach wikipedia describes common solutions href https en wikipedia org wiki longest common substring problem rel nofollow longest common substring problem href questions tagged suffix tree class post tag title show questions tagged suffix tree rel tag suffix tree href questions tagged dynamic programming class post tag title show questions tagged dynamic programming rel tag dynamic programming dynamic programming solution takes em em time em em space pretty translation wikipedia pseudocode longest common substring common substrings longest enhance algorithm include shorter results lets examine table inputs ul li result diagonal streak top left li li result diagonal bottom li li result top row ninth column li li result bottom left li ul left top dont count rectangle formed diagonal words covered recommend pass building table make pass iterating backwards bottom gather result set 