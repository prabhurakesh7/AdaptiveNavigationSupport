multithreaded matrix multiplication 
recently started lerning multithreading writing program numerical calculations university decided make attempts programming multithreaded matrix multiplication code mind made attempt clean general questions multithreading hope opening topic ol li write code additional classes threads implement runnable callable looked approaches anonymous classes lambdas fount information pass parameters threads run call dont parameters final assuming write class matrix operations prefer write additinal class operation run thread li li assuming class multithreaded operations creating thread pool shutting method waste lot resources guess create thread pool member ob class instantiating needed invokeall object deleted problems shut thread pool destructor gc care case li ol concering code directly implemented matrix multiplication ways method running main thread method running thread multithreaded ensure background taks main thread slowing ways multithreaded matrix multiplication version transposes matrix submits multiplication vector vector multiplication transposes matrix back original form version takes matrices directly additinaly takes indices define row column matrices vector vector multiplication versions measured time needed multiplication calculated average af resulting matrices reults run code computers jvm windows laptop i5 5th generation ghz dual core desktop pc i5 4th generation ghz quad core expected desktop pc faster expected multithreaded versions half quarter time signle threaded version additional work creating threads expected multithreaded version transpose matrix faster operations running code confused results hope explain single threaded methods laptop roughly 340s matrix size assume expensive background tasks main thread desktop pc hand 440s question laptop defenitely slower faster generation faster 4th generation desktop pc runs times laptops speed expect faster difference generations big multithreaded methods laptop roughly 34s multithreading perfect half threads ten times faster desktop pc threads multiplication 16s 440s desktop pc working speed laptop threads comparison multithreaded methods version transposes matrix takes roughly 34s laptop version takes matrices directly takes roughly 200s sounds realistic half single threaded method slower version assume transposing matrix slower additional time matrix elements missing working matrix slower working vector hope answer questions writing long post sincerely thorsten 

answer big mystery time required matrix multiplication dominated time spent moving data ram cpu cache cores ram bus wont benefit cores multithreading block waiting memory access experiment write single threaded version matrix transpose vector multiplication find faster fast multithreaded version transpose reason original single threaded version slow load cache block cell column multiplied matrix transpose cells sequential memory loading block bunch optimize matrix multiplication optimize memory access cache efficiency divide work threads threads cores wastes time resources context switches questions convenient lambdas capture variables scope creates gc care dont explicitly shut thread pool free resources 