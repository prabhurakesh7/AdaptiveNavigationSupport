bridj dynamically invoke native function 
users clojure lazy delay creation classes objects spirit invoke native function resolved runtime returns clojure bridj hand offers attractive performance benefit claimed simplier api clear bridj similar runtime binding jna demonstrate performance penalties approach appears generating source file ahead time solution confirm 

edit understanding question amp focusing strong dynamically strong pre compilation hesitate claim impossible impossible strong word meaning em em standard routine bridj dynamical solution bridj dependent jnaerator turn dependent jna starting position original answer describing standard routine dynamically invoke native function bridj involving code generation href https code google bridj rel nofollow https code google bridj href https code google bridj wiki faq rel nofollow https code google bridj wiki faq youll ol li set bridj project project bridj dependencies li li run href https code google jnaerator rel nofollow jnaerator bridj output option libs generate files serve stubs delegates exported functions li li stubs referenced code invoke libs li ol sample quickstart blockquote original code blockquote blockquote translation binding bridj blockquote generated code hope helps 