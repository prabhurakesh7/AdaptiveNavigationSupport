card memory leak loop 
card vms doesnt garbage collector loop variable utilized loop turns garbage case transient byte array called size loop array loops slower version normal variable index loop slow variable loop loops 

variable exist byte code operations location stack represents byte code code conversion card converter stack virtual stack stack implemented cpu registers virtual stack general registers variable simply put register scope register reused cpu stack lifo queue transient memory ram stack continuously grows shrinks execution byte code makes applet registers stack memory reused local variables defined inside code blocks method arguments treated put variable transient array putting variable ram based heap card ram heap scope means update change written transient memory slower localized update cpu register found experimentation memory transient memory freed reuse memory purposes long reference array references persistent memory eeprom flash transient memory unclear normal variable created em field em object instance persists heap persistent memory eeprom flash eeprom flash limited amount em write cycles em writing eeprom flash em em slower writing ram hr card kinds transient memory clear reset clear deselect difference clear reset memory shared applet instances clear deselect memory reused applets card classic doesnt garbage collector runs applet execution request garbage collection startup clean memory referenced anymore heap transient memory persistent memory cleaning memory means scanning memory marking unreferenced blocks compacting memory similar defragmenting hard disk uncomfortably long time rom filled manufacturing phase operating system card api implementation byte code including constants pre loaded applets read field isnt consequence question asked 