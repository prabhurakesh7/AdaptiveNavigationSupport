graphics2d draw image gradient opacity 
draw top background image arbitrary point image cut circular hole drawn image background show hole solid shape gradient words pixel alpha opacity proportional distance center hole familiar gradients combine insanely expensive achieve effect 

solved href http stackoverflow mcve mcve shows images href http stackoverflow user1803551 answer screenshot adds move hole passing current mouse position method actual creation desired image takes place ul li fills image original image li li creates fully opaque color center completely transparent color border counterintuitive intention cut hole existing image step li li href http docs oracle javase docs api awt alphacomposite html dst rel nofollow assigned inversion alpha values formula stands result stands source stands destination li ul result image radial gradient transparency desired location fully transparent center fully opaque border combination filling oval size coordinates hole call filling image change outcome play achieve effects values small transparent hole large soft corona href http stack imgur ckine png rel nofollow img src http stack imgur ckine png alt transparentgradientinimage02 png values large sharply transparent center small corona href http stack imgur psfzl png rel nofollow img src http stack imgur psfzl png alt transparentgradientinimage01 png href https docs oracle javase docs api awt radialgradientpaint html rel nofollow javadocs examples find desired values hr related questions posted similar answers ul li href http stackoverflow questions java2d alpha mapping images java2d alpha mapping images li li href http stackoverflow questions 2d shadow casting 2d shadow casting li ul hr blockquote edit response question performance asked comments blockquote question performance approach compares approach interesting previous experience gut feeling faster general slow built mechanisms highly optimized cases hardware accelerated fact approach strong strong faster approach expected profound benchmark didnt employ caliper jmh give good estimation actual performance timings pc lines showing method roughly fast method performance advantages parametrizations reasons prefer solution 