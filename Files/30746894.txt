dtos granularity 
project latest spring hibernate persistence implementing rest api tables database lots records turn pretty big created lot daos retrieve levels detail accompanying dtos employee table database tons information employee client application benefit greatly retrieving levels detail employee entity bombarded entire entity time divided employee information levels detail accompanying dao hibernates strong aliastobean strong auto map retrieved entities dtos feel amount boiler plate process dtos dao methods url parameters level detail wanted bit worrying make cleaner approach question pattern follow retrieve levels detail persisted entity pretty spring hibernate feel free point considered basic knowledge aware 

queries make associations lazy mappings initialized demand hibernate fetch strategies wrong multiple dto classes business model entity make code readable maintainable number dto classes explode make balance readability maintainability performance dto field context leave null fill expensive null instruct object marshaller exclude null fields producing rest service response json xml bothers service consumer filling add features application starts context 