manage configuration file 
colleague discussing practices managing configuration file wanted feedback goal configuration file action events occur options debating ol li config file class path class implements action em actiontotake company publish sendeveryoneanemailclass em inside code event encountered em class forname config actiontotake newinstance run em order invoke action li li config file human readable phrase action em actiontotake sendeveryoneanemail em inside code event encountered parse config actiontotake perform mapping translates action implementation em sendeveryoneanemailclass run em li ol small team people reading config file team software devs unclear continue true future reasoning option reading config file explicitly immediately class invoked implemented action class implemented imported completely separate jar file recompiling changing code reasoning option config file high level description user intent implementation details specific class names amp package paths refactoring class package names make config file thoughts design philosophies preferred configuration files 

1st options advantage jas noticed ability link code future real advantage sell distribute software closed sourced package plan hot swap behavior production youve pointed cons refactoring 2nd option ul li wont refactoring change action sendemail bringbeer leave string failed li li readability good developer happen confused code find class based text necessarily full qualified code assume actions specific package explicitly provided combine options li ul possibility configuration code dont recompile package scripting language groovy lets create readable dsl refactoring 