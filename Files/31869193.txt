spring rest template creating connections slow 
restful service works fast testing localhost client spring rest template started naive approach make lot requests exception caused connections closed hanging time wait state exception starts happening ephemeral ports exhausted execution waits ports free peak performance long breaks rate time wait connections good tested linux ubuntu windows similar results time due ranges ports fix httpclient httpclientbuilder apache http components library client exceptions client limited number ephemeral ports settings total route performance command connections server setting numbers thousands client improve performance opening connections hr update setting number total route connections client creating hundred judging rest service implemented jax rs running jetty update2 tuned server memory settings good throughput naive approach bit faster overhead pooling client side 

spring boot leaking connections youre standard behavior linux kernel major os sockets closed machine state duration time prevent socket ephemeral port receiving packets intended previous socket port difference youre result connection pooling approaches takes specifically em em connection pooling default means rest call opens local ephemeral port connection server service fast blow local port range time apache taking advantage connection pooling prevent application problem service respond faster linux kernel taking sockets connection pooling make client slower matter didnt slow youd run local ephemeral ports enable tcp reuse linux kernel dangerous packets delayed ephemeral ports receiving random packets dont understand kinds problems solution connection pooling sufficiently high numbers achieve close performance youre tune connection pool youll tweak parameters limits number connections made single ip port pair limits number total connections opened case appears requests made location set high 