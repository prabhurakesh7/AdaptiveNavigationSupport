generation growing tomcat restarts 
jdk multiple servers heap size increasing till reaches application fails time period multiple gcs run generation growing application fails current work restart tomcat server 15gb ram core cpu setup recommendation values thought gc care generation appears memory leak gc thing 

check memory leak front jstacks jmaps thread dumps memory analyser tools dont leaks memory system fine tune garbage collector algorithms offers types garbage collectors strengths amp weakness href http blog takipi garbage collectors serial parallel cms g1 whats rel nofollow gc algorithms ol li strong serial collector strong serial collector simplest won designed single threaded environments li li strong parallel throughput collector strong biggest advantage multiple threads scan compact heap downside parallel collector stop application threads performing minor full gc collection li li strong cms collector strong algorithm multiple threads concurrent scan heap mark unused objects recycled sweep efficient increase size generation entire heap matter allocate background threads collector cpu order provide application higher levels continuous throughput li li strong g1 collector strong garbage collector g1 introduced jdk update designed support heaps larger 4gb g1 collector utilizes multiple background threads scan heap divides regions spanning 1mb 32mb depending size heap xx useg1gc flag li ol g1 collector fine tune region size parameter gb heap size region size strong gb strong mb strong mb strong experiment gen size stick default settings algorithm performance default values benchmarking href http blog mgm tp benchmarking g1 garbage collectors rel nofollow article 