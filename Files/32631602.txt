cartesian product streams stream streams 
create method creates stream elements cartesian products multiple streams aggregated type end binary operator arguments results streams em em collections streams strong strong strong strong produce stream values strong ax ay bx strong simple concatenation aggregating strings code desired case expected result expected result run code error strong illegalstateexception stream operated closed strong stream consumed em flatmap em easily fixed 

passing streams passing lists cases create implicit array varargs data source laziness imaginary data stored arrays cases resulting cartesian product stream longer inputs practically reason make inputs lazy lists elements total resulting stream elements storing elements memory big problem practical cases stored memory order generate stream cartesian products constantly rewind streams rewind streams retrieve original data buffering dont grabbing source colleciton array file network random numbers perform intermediate operations source intermediate operations slow lazy solution slower buffering solution source unable produce data random numbers generator produce numbers produced solution incorrect totally lazy solution possbile streams stream suppliers solution interesting create reduce stream suppliers resulting supplier finally call usage 