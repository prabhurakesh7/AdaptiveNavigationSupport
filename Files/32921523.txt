efficiency logic line calling method 
disagreement 2nd year professor hoping yall solve code started remove reference place code directly statement change peek method contents make code efficient argued runtime compile time optimizer inlined didnt machine operations negligible situation bad style makes program readable changeable guess question runtime efficiency gained inlineing logic opposed calling method simple profiling techniques aka long loop stopwatch tests inconclusive edit responses taking time commented pragmatism arguing professor data mike dunlavey insight professor advice coding sequence ya pulser profiling advice links time share 

correct assumptions code behaviour impolite professor arguing data arguing data pointless prove assumptions measurements graphs jmh href http openjdk net projects code tools jmh http openjdk net projects code tools jmh create small benchmark measure difference ul li inlined hand remove isempty method place code call place li li inlined jit compiler hotspot 100k invocations jit print compilation output li li disabled hotspot inlining li ul read href http www oracle technetwork whitepaper html method http www oracle technetwork whitepaper html method parameters ul li djava compiler li li xx printcompilation li ul jdk version set parameters control jit create set graphics results research politely present professor benefit future href http stackoverflow users aleksey shipilev http stackoverflow users aleksey shipilev jmh related questions btw great success inlined plenty methods single huge code loop achieve maximum speed neural network backpropagation routine lazy inline methods methods methods unmaintainable fast 