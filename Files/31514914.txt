time bound tasks exectutorservice 
long running tasks submitted task run time tasks submitted internal blocking queue completion submitted task notification back release tasks queue execution notification triggered programming errors network issues scenarios possibility task queue grow quiet large encounter scenario tasks lie forever queue overcome thinking writing thread check periodically time task lying idle queue task lying queue minutes assume earlier submitted task encountered error return evict task queue executed existing mechanism handle write custom logic br reason preferring service tasks executed periodically failure scenarios execute delay strong edit strong overview architecture solution designing support concurrent static file downloads typically thousands download requests download requests triggered ui based application requests triggered taking advantage approach intend throttle download requests user creates request download requests ol li application worker threads create tasks download li li tasks submitted defined max http thread pool size means support maximum synchronous parallel downloads servlet task turn asks remote http clients perform http http threads play li li remaining requests queued li li http client perfomr http http threads streams response blocking fashion li li receive create notification inform client completed download li li throttle release submit task previously queued requests li ol scenarios receive responses http http throttling mechanism works charm case servlet threw exception response back http worker thread free possibility task remain queue overcome thinking timer based approach http response minutes submit queue task execution kind fall back mechanism avoid major memory leaks 

limit maximum amount time allowed task calling timeout catching perform clean heres implementation doesnt block main thread waiting separate thread pools prevent threads monitor thread execute task leading unmonitored task 