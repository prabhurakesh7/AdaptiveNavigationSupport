titan cassandra multithreaded transactions locking 
created class wraps interact graph predefined ways construct factory base framework problem rest controller receive json file results instantiating translates file graph commits basic paradigm code assure thread commit graph time occur commit allowed time 

recommend create instance request expensive create share requests great care web applications transaction leak requests transaction bound current thread assure request cleans issuing completes error success doubly assure issuing start request mind lets answer question restricted action single thread doesnt prevent threads opening transactions request handled thread easily href http s3 thinkaurelius docs titan eventual consistency html rel nofollow grab lock key blocked commit ending locking exception youre href http s3 thinkaurelius docs titan tx html transaction failures rel nofollow transaction eventually fail sufficiently large systems treated expected side effect locks typical approach dealing retrying entire transaction encountering design base architecture premise tips area ol li limit locks bottleneck work li li transactions short issuing grab locks longer stay open greater chance contention request li ol 