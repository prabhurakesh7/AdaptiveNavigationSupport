factory pattern validating input creating bean guice guava 
writing app guice dependency injection guavas preconditions attribute validation factory pattern create beans based external input question strong preferred validate input strong terms maintainability clarity lets assume classes strong bean strong strong beanimpl strong check param holds valid foo strong strong ul li beanimpls constructor unsure adding checks constructor feels bad idea li li calling beanfactory create param sounds terrible code duplication li li guice mechanism unaware li ul 

invalid construct throw constructor detailing wrong early definitions objects state behavior combined enforces pollute objects invalid state factory convenience check values constructing objects factorys true responsibilities extend objects responsiblities factory pattern good making object corresponds meaningful ways shouldnt objects job making objects internal state correct object factory making objects state correct misplaced behavior put behavior verifying state factory state object result decentralized connected code em supposed em tightly coupled means factory make object factory make object makes sense making object directly doesnt unit testing didnt put verification code factory unit test object independently testing bad parameters put verification code factory construct valid objects factory hint unnaturally coupled objects shouldnt tightly coupled exceptions tend expects data manner collected didnt provide validation structured record collected network socket data conceptually internally consistent due nature processing invalid input handled logged discarded 