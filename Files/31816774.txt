code design performance maintainability 
h2 contextualisation h2 implementing bytecode instrumenter soot framework testing context design building tracemethod object method class instrumenting run instrumenter multiple classes option offers performance space time h3 option maps h3 h3 option objects h3 implemented em option em boss suggest em option em argue lighter article href http stackoverflow questions class object hashmap class object hashmap hashmaps memory objects convinced solution em option em simple detail optimal solution concern performance space time option term maintainability sacrifice optimal 

approach potentical faster space byte code instrumenter implement approach br works replace lists generic lists primitive types integer double object int bytes integer object bytes depending machine pc android list replaced found statistic package apache remeber correctly primitive ints replaced int content change anymore write growingdoublearray double remember collections handy slower br objects times space primitives br byte code instrumenter performance software run week finally replace maps generic work step final optimization step elements lists maps switch linear search fastest low number elements make code intelligent switch search algorithms number elements exceed specific number sun oracle apple ios collections step make code complex space exmample br decisionnode class id double boolean padding multiple bytes 