generics inheritance specific issue 
inheritance generic classes interfaces issue understand problem reflected simplified code compile time error classes subclassing h2 additional information editing h2 hierarchies ul li hierarchy classes relevant information object comparator function analyses pair objects type class object defines type comparator accepts main requirement comparator accept object type hosting object accept comparators compare comparators accept li li hierarchy classes comparators compare objects hierarchy li ul element hierarchies adds supplementary functionality leveraged subclasses strong lets case paths hierarchies strong ul li members types type type accepts li li object implements additional functionality related collections compare objects basic types complex objects collection apply aggregator returns maximum collection basic types utilized compare elements collection complex objects collections integrated comparators utilized li li implements compare lists objects presented compare sets objects cross product li li type comparator li ul subclasses refined implementations comparing basic complex objects strong supporting code strong dependency injection assign comparators tree objects specific class approach feasible give possibility flexibility choosing proper comparator specific types objects 

remove class interface 