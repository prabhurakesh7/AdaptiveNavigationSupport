source ptransform 
project create connector dataflow database documentation states source sink lot people directly ptransform pinput pdone source sink api experimental explaines examples ptransform easy integrate custom runner spark refer code methods case interesting ptransform api source sink api supposed remplace ptranform api miss differentiate methods source sink api stable considered good code inputs outputs advice 

philosophy dataflow strong main unit abstraction composability strong contained data processing task encapsulated includes task connecting party storage system ingesting data exporting google cloud datastore code snippet return type subclass type subclass true functions hood implemented classes user read write datastore implementation detail matter em end answer exposing class em connector matter data processing task em connectors read tend connectors write tend options make easier connectors flexible ways reading filenames em detail matters implement connector strong classes implement connector ptransform strong strong implement connector built transforms perfectly valid develop connector strong classes provide low level capabilities case cumbersome impossible develop provide hooks controlling parallelization initial dynamic work rebalancing hooks exposed arbitrary technically implement parser file format writing takes filename input reads file emits dynamically parallelize reading parts file multiple workers case file turned large runtime hand capability built handling glob filepatterns likewise implementing connector streaming system implementing takes dummy element input establishes connection streams elements dont support writing unbounded amounts output single bundle explicitly support checkpointing deduplication machinery needed strong consistency guarantees dataflow streaming pipelines hand supports precisely interesting composite transform write wanted hard coded support dataflow runner backend developed consideration typical distributed fault tolerance issues arise writing data storage system parallel em hooks force issues mind em bundles data written parallel bundles retried duplicated fault tolerance hook committing results successfully completed bundles strong summarize strong apis develop connector helps structure code work distributed processing setting source apis give access advanced capabilities framework connector simple free assemble connector built transforms strong suppose decide make package connector library provide class wrap strong strong connector ultimately packaged strong user pipeline hood transform classes common pattern expose classes making fluent builder pattern letting user wrap transform strict requirement 