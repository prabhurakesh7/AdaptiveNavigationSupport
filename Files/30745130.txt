path reconstruction hashing 
figure find time complexity algorithm solve input pair start point end point construct path start input matches end input case alphabetically list br br br br br pb bm pairs start point end create output br br br br naturally check cycles case report cycle time swapping algorithm basically swapping entries match moving list faster understand semi intuitively wondering clear basically assuming make sort hash key type structure reference object key collections starts ends input create object start end field add starts ends arrays find basically end start start add respective object list finding thing figure implement hash table similar data structure add starts ends separate hash tables start points lookup keys pseudocode solved python github wondering translate algorithm efficient solutions interested type problem solving understanding generally data structures perspective 

heres simple implementation hashmaps stores end point start point key point exists start point end point key iterating keyset checking key find origin origin cycle sufficient determine cycle cycle origin set unique origin cycle detect walk set track point visited simply walk set end visiting points length input cycle walk set set string origin key print key pair origin end origin start end set end origin origin loop terminates found end hashmap current origin algorithm fails duplicate start end positions list clear question handle case 