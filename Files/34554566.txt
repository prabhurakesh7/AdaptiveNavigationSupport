design pattern approach handle access control fields object 
oo program language access modifiers access scope fields inside object public protected private access scope field caller object question strong access permissions callee callers strong important point strong caller class written programmers main program written change permission implementation strong suppose entities chess game program chessboard players black side player read access chess chessboard move access access black chess move turn vice versa ideas ideas complicated ideal good approach design pattern deal problem ideas strong access key class strong ul li make class access key li li game hoster class assign key instance players li li chessboard class instance key map table li li time player read move action board give key instance parameter method permission denied exception thrown li ul strong mediate controller class strong ul li class boardcontroller inside chessboard li li class boardcontroller move white chess black chess li ul strong class decide move chess player class written programer write ai permission judgement flow class directly player class approach question strong ul li assign boardcontroller instance player li ul strong low level approach ugly ideal strong move read method board class check callstack thread caller belong class player side black white idea 

proxy design pattern controlling access specific object control creation part client idea proxy part client calls method access throw exception case modify class interface method throwing exception actual implementation wont sake proxy good solution href http www oodesign proxy pattern html rel nofollow reference 