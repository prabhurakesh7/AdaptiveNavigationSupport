concurrent entities read update hibernate postgres 
application written spring hibernate postgres tracks users login attempts user invalid attempts ip address hour ip address blocked entity class storing information login attempts app login request checks ip address blocked blockdate null returns special response code user app login request credentials wrong ul li attempt hour ago increments wrongattemptscount wrongattemptscount sets blockdate li li attempt hour ago sets wrongattemptscount li ul app login request credentials correct resets wrongattemptscount user make mistakes issue users login simultaneously ip instance wrongattemptscount user attempt incoming requests wrong credentials theory request pass blocked practice wrongattemptscount equals database processed blocked options solve issue minimal performance loss thought select update statement query colleague hit performance offered version annotation worth faster offer options 

optimistic locking yields performance href http vladmihalcea preventing lost updates long conversations rel nofollow prevents lost updates multi request conversations prevent multiple concurrent transactions updating row notified row version transaction pass stale state exception understand href http vladmihalcea beginners guide persistence locking rel nofollow locks acquired dont explicitly request modified row takes lock href http vladmihalcea beginners guide jpahibernate flush strategies rel nofollow transactional write cache post pones entity state transition end current transaction href http vladmihalcea hibernate locking patterns pessimistic read pessimistic write work rel nofollow pessimistic locking mechanism takes explicit locks obtain shared lock supports prevent transactions acquiring shared lock entity optimistic locking failure attempts current transaction releases lock competing transaction acquire newly released lock save failed logic attempt prevented href http vladmihalcea beginners guide acid database transactions rel nofollow repeatable read serializable increasing transaction isolation level lower application scalability optimistic locking handle stale state exceptions 