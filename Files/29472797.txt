returning object reference slower returning primitive 
working latency sensitive application microbenchmarking kinds methods href http openjdk net projects code tools jmh jmh microbenchmarking lookup method satisfied results implemented final version find final version em times slower em benchmarked culprit implemented method returning object simplified version benchmark code benchmark results changing return type function changed performance factor thought sole difference returning enum object versus integer returns bit reference returns bit colleagues guessing returning enum added additional overhead track reference potential gc enum objects static final references strange explanation performance difference hr strong update strong shared maven project href https github shalomshachne shared benchmarks git clone run benchmark time interest helpful replicate results replicated machines windows linux flavors oracle jvms zhekakozlov difference methods run cloning repository 

strong tl dr put blind trust strong things important verify experimental data jumping conclusions claiming 3x faster slower odd follow reason performance difference trust numbers important nano benchmarks experimenters understand control dont returning methods callers thing primitive reference question youll realize basically measuring test infrastructure point machine i5 4210u linux x86 jdk 8u40 test yields reference tests 3x slower wait jmh lets update current latest oops barely slower btw tells test infrastructure bound build benchmarks calls methods youll method consumes values rationale overloads href http hg openjdk net code tools jmh file 96d8047fbf9a jmh core src main org openjdk jmh infra blackhole l298 references href http hg openjdk net code tools jmh file 96d8047fbf9a jmh core src main org openjdk jmh infra blackhole l384 primitives justify performance difference rationale methods fast types argument necessarily exhibit performance characteristics match symmetric result newer jmh generated code tests performance point em em understand returning primitive reference differs performance wise enter strong em big scary grey zone em strong nuanced performance benchmarking test yields result primitives references tests em require em reasons results case generated code explains result strong prim strong strong ref strong sarcasm easy sarcasm pattern simpler question work make plausible reliable answer 