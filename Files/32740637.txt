optimizing application asynchronous programming 
modify dropwizard application improve running time basically application receives million urls daily downloads parses detect malicious content problem application process million urls looked application found making lot sequential calls suggestion improve application making asynchronous techniques required code thinking approaches ul li calling dropwizard resource method post call directly scheduler li li orchestrator return detectionscore ill store detectscores map table perform batch database insertion individual insertion present code li ul comments approaches possibly techniques improve running time read asynchronous programming understand code edit bottlenecks ul li downloading webpage li li insertion result database database located system li li processing performed url time li ul system gb memory gb appears free cpu usage minimal 

inspired davides great answer easy parallelise href https github aol simple react rel nofollow simple react library wrote slightly client drive concurrency server strong strong strong explanation strong drive concurrency client means distribute work threads serverside additional work making concurrent requests set close max server handle application io bound lot threads drive performance simple react works stream futures create async task call contentdetection client threads calls made server strong strong backport jdk functionality called href http sourceforge net projects streamsupport rel nofollow streamsupport backport lambda expressions href https github orfjackal retrolambda rel nofollow retrolambda implement solution completablefutures create future task eligible url strong update strong dont batch executor limit number active futures join end 