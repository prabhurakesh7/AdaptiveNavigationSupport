volatile final required reference synchronized object 
pretty basic issue find clear confirmation lets class properly synchronized strong reference strong instance class shared threads strong declare instance volatile final strong mysharedobject final instantiation depends conditions interaction gui info socket strong final volatile mandatory strong fact myclass synchronizes access members exempt care ensuring refence shared threads strong differences strong href http stackoverflow questions difference volatile synchronized difference volatile synchronized referred question synchronized volatile alternatives field variable question correctly properly synchronized class synchronized choosen implications needed considered caller possibly volatile final reference synchronized class words referred question answers locking volatile object question threads object locking accessing answer referred question refers explicitly volatile reference em immutable em object em synchronization em answer limits primitive types find complete shed doubts case giving referred answers abstract scholarly explanations open question code stated introduction clear confirmation actual code referring specific common issue theyre related text book related specific problem read opening question find discuss specific application text books resolved problems doubts people applying wouldnt stackoverflow multithreading proper understanding details race conditions thousand times horribly wrong thousand time 

make access variable thread making ensure threads access variable inside synchronous block wouldnt thread sees variable thread thread accesses variable happen multi core machines multiple caches strong memory model strong main point memory model states thread guaranteed memory update thread update read state called em relation em relation enforced constructs variable assignment thread guaranteed visible thread threads conceptually local caches long enforce caches multiple threads synchronized thread reads writes local cache lead situation threads completely values reading field additional ways enforce visibility memory static initializers addition newly created thread sees current memory parent thread synchronization work synchronization creation threads enforced happen field initialized em em relying subtle fact risky easily break refactor code detail mind details relation hard understand href http docs oracle javase specs jls se7 html jls html rel nofollow title language specification language specification 