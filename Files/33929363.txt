performance wise limit stream case multithreading 
watched talk jos paumard infoq href http www infoq fr presentations jdk8 lambdas streams collectors rel nofollow http www infoq fr presentations jdk8 lambdas streams collectors french thing stuck point collect 1m long stream strong strong multithreading fact threads checking limit hinders performance talk solution performance wise question code costly 

em implementation dependent em limitation thing developers concerned parallel performance understand predictable stream sizes parallel performance generally balanced splitting workload issue combination infinite stream created produce stream predictable size perfectly predictable examine helper method print pre class lang prettyprint override sources produce streams predictable size intermediate operations capable carrying information size affected propagate size exact size clear predict actual number elements source size estimate reasonable maximum number elements pass filter contrast current implementation provide size source exact size predictable size simple reports nonsensical estimate size source size fact resulting size higher limit case infinite stream additional obstacle href http docs oracle javase docs api util spliterator html rel nofollow interface streams based doesn report infinite cases infinite stream limit returns estimate means guess rule thumb current implementation programmer avoid desired size stream source significant documented drawbacks case em ordered em parallel streams doesn applies randoms developers avoid 