avoid race conditions shared counters jpa hibernate 
spring framework hibernate commerce web application public user purchase product web app product quantity count strong issue strong prevent scenario concurrent users purchase product left quantity case user purchase product user receive stock message strong workflow strong intend decrement quantity count send purchase information payment gateway payment gateway encounters payment issue increment quantity count lock released purchase info payment gateway question confirm href http stackoverflow questions enable lockmodetype pessimistic write entities sprin answer pessimistic locking solves issue workflow 

href http vladmihalcea beginners guide database locking lost update phenomena rel nofollow optimistic locking prevent href http vladmihalcea preventing lost updates long conversations rel nofollow lost updates optimistic locking users loaded entity stack user made purchase decremented counter user wont update product entity product version doesnt matches found database incremented user exception stalestateexception current transaction rolled back change applied database adding orderline quantity product optimistic locking approach scales pessimistic locking woks multi request logical transactions 