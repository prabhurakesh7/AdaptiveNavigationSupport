jvm process allocate memory 
gap understanding jvm process allocates memory offheap consists thread stacks direct buffers mapped files libraries jars jvm code moment analyze application spring boot infinispan rss strong 779m strong runs docker container pid committed heap size strong 374m strong href http stack imgur nirws png img src http stack imgur nirws png alt enter image description metasapce size strong 89m strong br href http stack imgur tegr2 png img src http stack imgur tegr2 png alt enter image description words explain strong 799m 374m 89m 316m strong offheap memory app average strong live threads strong href http stack imgur t0ijs png img src http stack imgur t0ijs png alt enter image description threads consumes 1m add strong 36m strong place app directbuffer nio jmx doesn consume lot resources strong 98k strong href http stack imgur fhxgk png img src http stack imgur fhxgk png alt enter image description step mapped libs jars href https gist github krestjaninoff 2b027b87e7cad7260259 full output strong 20m strong explain strong 316m 36m 20m 260m strong idea missed 

strong approach strong href https docs oracle javase docs technotes guides troubleshoot tooldescr007 html rel nofollow hotspot native memory tracking nmt give exact list memory allocated jvm splitted areas em heap classes threads code gc compiler internal symbols memory tracking pooled free chunks em em unknown em strong usage strong ul li start application li li observations current heap li ul em find jcmd pid em default opedjdk installation ubuntu found running parameter list running applications strong output strong receive complete overview heap blockquote strong total strong reserved 664192kb committed 253120kb lt total memory tracked native memory tracking ul li strong heap strong reserved 516096kb committed 204800kb lt heap mmap reserved 516096kb committed 204800kb li li strong class strong reserved 6568kb committed 4140kb lt class metadata classes lt number loaded classes malloc 424kb lt mallocd memory number malloc mmap reserved 6144kb committed 3716kb li li strong thread strong reserved 6868kb committed 6868kb thread lt number threads stack reserved 6780kb committed 6780kb lt memory thread stacks malloc 27kb arena 61kb lt resource handle areas li li strong code strong reserved 102414kb committed 6314kb malloc 2574kb mmap reserved 99840kb committed 3740kb li li strong gc strong reserved 26154kb committed 24938kb malloc 486kb mmap reserved 25668kb committed 24452kb li li strong compiler strong reserved 106kb committed 106kb malloc 7kb arena 99kb li li strong internal strong reserved 586kb committed 554kb malloc 554kb mmap reserved 32kb committed 0kb li li strong symbol strong reserved 906kb committed 906kb malloc 514kb arena 392kb li li strong memory tracking strong reserved 3184kb committed 3184kb malloc 3184kb li li strong pooled free chunks strong reserved 1276kb committed 1276kb malloc 1276kb li li strong unknown strong reserved 33kb committed 33kb arena 33kb li ul blockquote detailed overview memory areas jvm shows em reserved em em commited em memory dont technique detailed memory consumption list strong reading strong combination commands detailed explaination found href https docs oracle javase docs technotes guides troubleshoot tooldescr006 html babehabg rel nofollow platform standard edition troubleshooting guide jcmd utility check commands 