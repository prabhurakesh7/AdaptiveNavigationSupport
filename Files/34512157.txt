typing generic type type generics 
type method signature accepts equally typed parameters concrete subtypes code generics solve case absolutely edit end compiler pass edit found imagine interface tuple child classes duple triple perfectly nice 

h1 suggest h1 rid method argument generics reason force caller provide return accept leave method turn return return sort write parameter return type simply leaves hard part method em instantiate em object unknown type hard invoke produce behalf luckily functional interface invoke method part painful invoker provide good heres code compiles leave type parameter invocation compiles h1 youre h1 type arguments parameterized dont type arguments restrictions obscure class extends fits doesnt type argument invoked method require work requires unparameterized type type arguments type arguments method accept arguments return violates basic premise control things reality allowed guarantee instance compiler allowed necessarily weaker type checking bottom line youre isnt built h1 h1 complete type safety inside method suggested method make incoming values make caller rely return specific subtype values guarantees make difference 