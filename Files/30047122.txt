forkjoinpool recursive tasks work stealing work 
submit tasks forkjoinpool method jdk hood transformed forkjointask objects forkjoinpool efficient task split smaller recursively strong question strong work stealing work forkjoinpool recursion worth case strong update strong tasks small unbalanced strictly equal tasks things context switching thread scheduling parking pages misses leading strong imbalance strong strong update strong doug lea wrote href http cs oswego pipermail concurrency interest january html concurrency jsr interest group giving hint blockquote greatly improves throughput tasks async submitted pool forked reasonable structure actor frameworks plain services threadpoolexecutor blockquote presume small cpu bound tasks forkjoinpool optimization main point tasks small neednt recursive decomposition strong work stealing strong works big small task tasks grabbed free worker deques tail busy worker strong update strong href http letitcrash post 17607272336 scalability fork join pool scalability forkjoinpool benchmarking akka team ping pong shows great results apply forkjoinpool efficiently requires performance tuning 

source code nice section called implementation overview read ultimate truth explanation understanding jdk 8u40 day work queue worker thread lets call worker queues forked tasks pushed local worker queue ready popped worker executed words stack worker thread perspective worker depletes worker queue steal tasks worker queues em work stealing em iirc jdk 7u12 single global em submission queue em worker threads ran local tasks tasks steal external work design advantage regular backed changed significantly submission queue identified performance bottleneck doug lea al striped submission queues hindsight idea reuse mechanics worker queues loosely distribute submission queues worker threads external submission submission queues workers work munch submission queue worker wander submission queues call em em work stealing workloads benefiting design advantage plain recursive tasks recognized long ago users concurrency interest asked simple work stealing executor arcanery reasons href https docs oracle javase docs api util concurrent executors html newworkstealingpool jdk onward delegating open providing simpler implementation 